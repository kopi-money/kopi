// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/dex/tx.proto

package dex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_AddLiquidity_FullMethodName                = "/kopi.dex.Msg/AddLiquidity"
	Msg_RemoveLiquidity_FullMethodName             = "/kopi.dex.Msg/RemoveLiquidity"
	Msg_Trade_FullMethodName                       = "/kopi.dex.Msg/Trade"
	Msg_RemoveAllLiquidityForDenom_FullMethodName  = "/kopi.dex.Msg/RemoveAllLiquidityForDenom"
	Msg_AddOrder_FullMethodName                    = "/kopi.dex.Msg/AddOrder"
	Msg_RemoveOrder_FullMethodName                 = "/kopi.dex.Msg/RemoveOrder"
	Msg_RemoveOrders_FullMethodName                = "/kopi.dex.Msg/RemoveOrders"
	Msg_UpdateOrder_FullMethodName                 = "/kopi.dex.Msg/UpdateOrder"
	Msg_UpdateTradeFee_FullMethodName              = "/kopi.dex.Msg/UpdateTradeFee"
	Msg_UpdateOrderFee_FullMethodName              = "/kopi.dex.Msg/UpdateOrderFee"
	Msg_UpdateReserveShare_FullMethodName          = "/kopi.dex.Msg/UpdateReserveShare"
	Msg_UpdateVirtualLiquidityDecay_FullMethodName = "/kopi.dex.Msg/UpdateVirtualLiquidityDecay"
	Msg_UpdateFeeReimbursement_FullMethodName      = "/kopi.dex.Msg/UpdateFeeReimbursement"
	Msg_UpdateMaxOrderLife_FullMethodName          = "/kopi.dex.Msg/UpdateMaxOrderLife"
	Msg_UpdateTradeAmountDecay_FullMethodName      = "/kopi.dex.Msg/UpdateTradeAmountDecay"
	Msg_UpdateDiscountLevels_FullMethodName        = "/kopi.dex.Msg/UpdateDiscountLevels"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error)
	RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error)
	Trade(ctx context.Context, in *MsgTrade, opts ...grpc.CallOption) (*MsgTradeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	RemoveAllLiquidityForDenom(ctx context.Context, in *MsgRemoveAllLiquidityForDenom, opts ...grpc.CallOption) (*Void, error)
	AddOrder(ctx context.Context, in *MsgAddOrder, opts ...grpc.CallOption) (*Order, error)
	RemoveOrder(ctx context.Context, in *MsgRemoveOrder, opts ...grpc.CallOption) (*Void, error)
	RemoveOrders(ctx context.Context, in *MsgRemoveOrders, opts ...grpc.CallOption) (*Void, error)
	UpdateOrder(ctx context.Context, in *MsgUpdateOrder, opts ...grpc.CallOption) (*Order, error)
	UpdateTradeFee(ctx context.Context, in *MsgUpdateTradeFee, opts ...grpc.CallOption) (*Void, error)
	UpdateOrderFee(ctx context.Context, in *MsgUpdateOrderFee, opts ...grpc.CallOption) (*Void, error)
	UpdateReserveShare(ctx context.Context, in *MsgUpdateReserveShare, opts ...grpc.CallOption) (*Void, error)
	UpdateVirtualLiquidityDecay(ctx context.Context, in *MsgUpdateVirtualLiquidityDecay, opts ...grpc.CallOption) (*Void, error)
	UpdateFeeReimbursement(ctx context.Context, in *MsgUpdateFeeReimbursement, opts ...grpc.CallOption) (*Void, error)
	UpdateMaxOrderLife(ctx context.Context, in *MsgUpdateMaxOrderLife, opts ...grpc.CallOption) (*Void, error)
	UpdateTradeAmountDecay(ctx context.Context, in *MsgUpdateTradeAmountDecay, opts ...grpc.CallOption) (*Void, error)
	UpdateDiscountLevels(ctx context.Context, in *MsgUpdateDiscountLevels, opts ...grpc.CallOption) (*Void, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddLiquidity(ctx context.Context, in *MsgAddLiquidity, opts ...grpc.CallOption) (*MsgAddLiquidityResponse, error) {
	out := new(MsgAddLiquidityResponse)
	err := c.cc.Invoke(ctx, Msg_AddLiquidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveLiquidity(ctx context.Context, in *MsgRemoveLiquidity, opts ...grpc.CallOption) (*MsgRemoveLiquidityResponse, error) {
	out := new(MsgRemoveLiquidityResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveLiquidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Trade(ctx context.Context, in *MsgTrade, opts ...grpc.CallOption) (*MsgTradeResponse, error) {
	out := new(MsgTradeResponse)
	err := c.cc.Invoke(ctx, Msg_Trade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAllLiquidityForDenom(ctx context.Context, in *MsgRemoveAllLiquidityForDenom, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_RemoveAllLiquidityForDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddOrder(ctx context.Context, in *MsgAddOrder, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, Msg_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveOrder(ctx context.Context, in *MsgRemoveOrder, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_RemoveOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveOrders(ctx context.Context, in *MsgRemoveOrders, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_RemoveOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOrder(ctx context.Context, in *MsgUpdateOrder, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, Msg_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTradeFee(ctx context.Context, in *MsgUpdateTradeFee, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateTradeFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOrderFee(ctx context.Context, in *MsgUpdateOrderFee, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateOrderFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateReserveShare(ctx context.Context, in *MsgUpdateReserveShare, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateReserveShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVirtualLiquidityDecay(ctx context.Context, in *MsgUpdateVirtualLiquidityDecay, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateVirtualLiquidityDecay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFeeReimbursement(ctx context.Context, in *MsgUpdateFeeReimbursement, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateFeeReimbursement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaxOrderLife(ctx context.Context, in *MsgUpdateMaxOrderLife, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateMaxOrderLife_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTradeAmountDecay(ctx context.Context, in *MsgUpdateTradeAmountDecay, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateTradeAmountDecay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDiscountLevels(ctx context.Context, in *MsgUpdateDiscountLevels, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Msg_UpdateDiscountLevels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	AddLiquidity(context.Context, *MsgAddLiquidity) (*MsgAddLiquidityResponse, error)
	RemoveLiquidity(context.Context, *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error)
	Trade(context.Context, *MsgTrade) (*MsgTradeResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	RemoveAllLiquidityForDenom(context.Context, *MsgRemoveAllLiquidityForDenom) (*Void, error)
	AddOrder(context.Context, *MsgAddOrder) (*Order, error)
	RemoveOrder(context.Context, *MsgRemoveOrder) (*Void, error)
	RemoveOrders(context.Context, *MsgRemoveOrders) (*Void, error)
	UpdateOrder(context.Context, *MsgUpdateOrder) (*Order, error)
	UpdateTradeFee(context.Context, *MsgUpdateTradeFee) (*Void, error)
	UpdateOrderFee(context.Context, *MsgUpdateOrderFee) (*Void, error)
	UpdateReserveShare(context.Context, *MsgUpdateReserveShare) (*Void, error)
	UpdateVirtualLiquidityDecay(context.Context, *MsgUpdateVirtualLiquidityDecay) (*Void, error)
	UpdateFeeReimbursement(context.Context, *MsgUpdateFeeReimbursement) (*Void, error)
	UpdateMaxOrderLife(context.Context, *MsgUpdateMaxOrderLife) (*Void, error)
	UpdateTradeAmountDecay(context.Context, *MsgUpdateTradeAmountDecay) (*Void, error)
	UpdateDiscountLevels(context.Context, *MsgUpdateDiscountLevels) (*Void, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) AddLiquidity(context.Context, *MsgAddLiquidity) (*MsgAddLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiquidity not implemented")
}
func (UnimplementedMsgServer) RemoveLiquidity(context.Context, *MsgRemoveLiquidity) (*MsgRemoveLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLiquidity not implemented")
}
func (UnimplementedMsgServer) Trade(context.Context, *MsgTrade) (*MsgTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (UnimplementedMsgServer) RemoveAllLiquidityForDenom(context.Context, *MsgRemoveAllLiquidityForDenom) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllLiquidityForDenom not implemented")
}
func (UnimplementedMsgServer) AddOrder(context.Context, *MsgAddOrder) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedMsgServer) RemoveOrder(context.Context, *MsgRemoveOrder) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrder not implemented")
}
func (UnimplementedMsgServer) RemoveOrders(context.Context, *MsgRemoveOrders) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrders not implemented")
}
func (UnimplementedMsgServer) UpdateOrder(context.Context, *MsgUpdateOrder) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedMsgServer) UpdateTradeFee(context.Context, *MsgUpdateTradeFee) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTradeFee not implemented")
}
func (UnimplementedMsgServer) UpdateOrderFee(context.Context, *MsgUpdateOrderFee) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderFee not implemented")
}
func (UnimplementedMsgServer) UpdateReserveShare(context.Context, *MsgUpdateReserveShare) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReserveShare not implemented")
}
func (UnimplementedMsgServer) UpdateVirtualLiquidityDecay(context.Context, *MsgUpdateVirtualLiquidityDecay) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualLiquidityDecay not implemented")
}
func (UnimplementedMsgServer) UpdateFeeReimbursement(context.Context, *MsgUpdateFeeReimbursement) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeReimbursement not implemented")
}
func (UnimplementedMsgServer) UpdateMaxOrderLife(context.Context, *MsgUpdateMaxOrderLife) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxOrderLife not implemented")
}
func (UnimplementedMsgServer) UpdateTradeAmountDecay(context.Context, *MsgUpdateTradeAmountDecay) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTradeAmountDecay not implemented")
}
func (UnimplementedMsgServer) UpdateDiscountLevels(context.Context, *MsgUpdateDiscountLevels) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscountLevels not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AddLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddLiquidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLiquidity(ctx, req.(*MsgAddLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveLiquidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveLiquidity(ctx, req.(*MsgRemoveLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Trade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Trade(ctx, req.(*MsgTrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAllLiquidityForDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAllLiquidityForDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAllLiquidityForDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAllLiquidityForDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAllLiquidityForDenom(ctx, req.(*MsgRemoveAllLiquidityForDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddOrder(ctx, req.(*MsgAddOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveOrder(ctx, req.(*MsgRemoveOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveOrders(ctx, req.(*MsgRemoveOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOrder(ctx, req.(*MsgUpdateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTradeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTradeFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTradeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTradeFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTradeFee(ctx, req.(*MsgUpdateTradeFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOrderFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOrderFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOrderFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateOrderFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOrderFee(ctx, req.(*MsgUpdateOrderFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateReserveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateReserveShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateReserveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateReserveShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateReserveShare(ctx, req.(*MsgUpdateReserveShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVirtualLiquidityDecay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVirtualLiquidityDecay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVirtualLiquidityDecay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateVirtualLiquidityDecay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVirtualLiquidityDecay(ctx, req.(*MsgUpdateVirtualLiquidityDecay))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFeeReimbursement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeeReimbursement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeeReimbursement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateFeeReimbursement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeeReimbursement(ctx, req.(*MsgUpdateFeeReimbursement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaxOrderLife_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaxOrderLife)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaxOrderLife(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMaxOrderLife_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaxOrderLife(ctx, req.(*MsgUpdateMaxOrderLife))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTradeAmountDecay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTradeAmountDecay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTradeAmountDecay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTradeAmountDecay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTradeAmountDecay(ctx, req.(*MsgUpdateTradeAmountDecay))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDiscountLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDiscountLevels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDiscountLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDiscountLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDiscountLevels(ctx, req.(*MsgUpdateDiscountLevels))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.dex.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLiquidity",
			Handler:    _Msg_AddLiquidity_Handler,
		},
		{
			MethodName: "RemoveLiquidity",
			Handler:    _Msg_RemoveLiquidity_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _Msg_Trade_Handler,
		},
		{
			MethodName: "RemoveAllLiquidityForDenom",
			Handler:    _Msg_RemoveAllLiquidityForDenom_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _Msg_AddOrder_Handler,
		},
		{
			MethodName: "RemoveOrder",
			Handler:    _Msg_RemoveOrder_Handler,
		},
		{
			MethodName: "RemoveOrders",
			Handler:    _Msg_RemoveOrders_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Msg_UpdateOrder_Handler,
		},
		{
			MethodName: "UpdateTradeFee",
			Handler:    _Msg_UpdateTradeFee_Handler,
		},
		{
			MethodName: "UpdateOrderFee",
			Handler:    _Msg_UpdateOrderFee_Handler,
		},
		{
			MethodName: "UpdateReserveShare",
			Handler:    _Msg_UpdateReserveShare_Handler,
		},
		{
			MethodName: "UpdateVirtualLiquidityDecay",
			Handler:    _Msg_UpdateVirtualLiquidityDecay_Handler,
		},
		{
			MethodName: "UpdateFeeReimbursement",
			Handler:    _Msg_UpdateFeeReimbursement_Handler,
		},
		{
			MethodName: "UpdateMaxOrderLife",
			Handler:    _Msg_UpdateMaxOrderLife_Handler,
		},
		{
			MethodName: "UpdateTradeAmountDecay",
			Handler:    _Msg_UpdateTradeAmountDecay_Handler,
		},
		{
			MethodName: "UpdateDiscountLevels",
			Handler:    _Msg_UpdateDiscountLevels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/dex/tx.proto",
}
