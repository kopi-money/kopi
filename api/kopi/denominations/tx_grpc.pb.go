// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/denominations/tx.proto

package denominations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_AddDEXDenom_FullMethodName                     = "/kopi.denominations.Msg/AddDEXDenom"
	Msg_UpdateDEXDenomMinimumLiquidity_FullMethodName  = "/kopi.denominations.Msg/UpdateDEXDenomMinimumLiquidity"
	Msg_UpdateDEXDenomMinimumOrderSize_FullMethodName  = "/kopi.denominations.Msg/UpdateDEXDenomMinimumOrderSize"
	Msg_AddKCoin_FullMethodName                        = "/kopi.denominations.Msg/AddKCoin"
	Msg_UpdateKCoinSupply_FullMethodName               = "/kopi.denominations.Msg/UpdateKCoinSupply"
	Msg_UpdateKCoinMintAmount_FullMethodName           = "/kopi.denominations.Msg/UpdateKCoinMintAmount"
	Msg_UpdateKCoinBurnAmount_FullMethodName           = "/kopi.denominations.Msg/UpdateKCoinBurnAmount"
	Msg_AddKCoinReferences_FullMethodName              = "/kopi.denominations.Msg/AddKCoinReferences"
	Msg_RemoveKCoinReferences_FullMethodName           = "/kopi.denominations.Msg/RemoveKCoinReferences"
	Msg_AddCollateralDenom_FullMethodName              = "/kopi.denominations.Msg/AddCollateralDenom"
	Msg_UpdateCollateralDenomLTV_FullMethodName        = "/kopi.denominations.Msg/UpdateCollateralDenomLTV"
	Msg_UpdateCollateralDenomMaxDeposit_FullMethodName = "/kopi.denominations.Msg/UpdateCollateralDenomMaxDeposit"
	Msg_AddCAsset_FullMethodName                       = "/kopi.denominations.Msg/AddCAsset"
	Msg_UpdateCAssetDexFeeShare_FullMethodName         = "/kopi.denominations.Msg/UpdateCAssetDexFeeShare"
	Msg_UpdateCAssetBorrowLimit_FullMethodName         = "/kopi.denominations.Msg/UpdateCAssetBorrowLimit"
	Msg_UpdateCAssetMinimumLoanSize_FullMethodName     = "/kopi.denominations.Msg/UpdateCAssetMinimumLoanSize"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	AddDEXDenom(ctx context.Context, in *MsgAddDEXDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateDEXDenomMinimumLiquidity(ctx context.Context, in *MsgUpdateDEXDenomMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateDEXDenomMinimumOrderSize(ctx context.Context, in *MsgUpdateDEXDenomMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddKCoin(ctx context.Context, in *MsgAddKCoin, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateKCoinSupply(ctx context.Context, in *MsgUpdateKCoinSupply, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateKCoinMintAmount(ctx context.Context, in *MsgUpdateKCoinMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateKCoinBurnAmount(ctx context.Context, in *MsgUpdateKCoinBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddKCoinReferences(ctx context.Context, in *MsgAddKCoinReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RemoveKCoinReferences(ctx context.Context, in *MsgRemoveKCoinReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddCollateralDenom(ctx context.Context, in *MsgAddCollateralDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateCollateralDenomLTV(ctx context.Context, in *MsgUpdateCollateralDenomLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateCollateralDenomMaxDeposit(ctx context.Context, in *MsgUpdateCollateralDenomMaxDeposit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddCAsset(ctx context.Context, in *MsgAddCAsset, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateCAssetDexFeeShare(ctx context.Context, in *MsgUpdateCAssetDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateCAssetBorrowLimit(ctx context.Context, in *MsgUpdateCAssetBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateCAssetMinimumLoanSize(ctx context.Context, in *MsgUpdateCAssetMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddDEXDenom(ctx context.Context, in *MsgAddDEXDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_AddDEXDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDEXDenomMinimumLiquidity(ctx context.Context, in *MsgUpdateDEXDenomMinimumLiquidity, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDEXDenomMinimumLiquidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDEXDenomMinimumOrderSize(ctx context.Context, in *MsgUpdateDEXDenomMinimumOrderSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDEXDenomMinimumOrderSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddKCoin(ctx context.Context, in *MsgAddKCoin, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_AddKCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKCoinSupply(ctx context.Context, in *MsgUpdateKCoinSupply, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateKCoinSupply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKCoinMintAmount(ctx context.Context, in *MsgUpdateKCoinMintAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateKCoinMintAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKCoinBurnAmount(ctx context.Context, in *MsgUpdateKCoinBurnAmount, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateKCoinBurnAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddKCoinReferences(ctx context.Context, in *MsgAddKCoinReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_AddKCoinReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveKCoinReferences(ctx context.Context, in *MsgRemoveKCoinReferences, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveKCoinReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCollateralDenom(ctx context.Context, in *MsgAddCollateralDenom, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_AddCollateralDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollateralDenomLTV(ctx context.Context, in *MsgUpdateCollateralDenomLTV, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCollateralDenomLTV_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollateralDenomMaxDeposit(ctx context.Context, in *MsgUpdateCollateralDenomMaxDeposit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCollateralDenomMaxDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCAsset(ctx context.Context, in *MsgAddCAsset, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_AddCAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCAssetDexFeeShare(ctx context.Context, in *MsgUpdateCAssetDexFeeShare, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCAssetDexFeeShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCAssetBorrowLimit(ctx context.Context, in *MsgUpdateCAssetBorrowLimit, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCAssetBorrowLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCAssetMinimumLoanSize(ctx context.Context, in *MsgUpdateCAssetMinimumLoanSize, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCAssetMinimumLoanSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	AddDEXDenom(context.Context, *MsgAddDEXDenom) (*MsgUpdateParamsResponse, error)
	UpdateDEXDenomMinimumLiquidity(context.Context, *MsgUpdateDEXDenomMinimumLiquidity) (*MsgUpdateParamsResponse, error)
	UpdateDEXDenomMinimumOrderSize(context.Context, *MsgUpdateDEXDenomMinimumOrderSize) (*MsgUpdateParamsResponse, error)
	AddKCoin(context.Context, *MsgAddKCoin) (*MsgUpdateParamsResponse, error)
	UpdateKCoinSupply(context.Context, *MsgUpdateKCoinSupply) (*MsgUpdateParamsResponse, error)
	UpdateKCoinMintAmount(context.Context, *MsgUpdateKCoinMintAmount) (*MsgUpdateParamsResponse, error)
	UpdateKCoinBurnAmount(context.Context, *MsgUpdateKCoinBurnAmount) (*MsgUpdateParamsResponse, error)
	AddKCoinReferences(context.Context, *MsgAddKCoinReferences) (*MsgUpdateParamsResponse, error)
	RemoveKCoinReferences(context.Context, *MsgRemoveKCoinReferences) (*MsgUpdateParamsResponse, error)
	AddCollateralDenom(context.Context, *MsgAddCollateralDenom) (*MsgUpdateParamsResponse, error)
	UpdateCollateralDenomLTV(context.Context, *MsgUpdateCollateralDenomLTV) (*MsgUpdateParamsResponse, error)
	UpdateCollateralDenomMaxDeposit(context.Context, *MsgUpdateCollateralDenomMaxDeposit) (*MsgUpdateParamsResponse, error)
	AddCAsset(context.Context, *MsgAddCAsset) (*MsgUpdateParamsResponse, error)
	UpdateCAssetDexFeeShare(context.Context, *MsgUpdateCAssetDexFeeShare) (*MsgUpdateParamsResponse, error)
	UpdateCAssetBorrowLimit(context.Context, *MsgUpdateCAssetBorrowLimit) (*MsgUpdateParamsResponse, error)
	UpdateCAssetMinimumLoanSize(context.Context, *MsgUpdateCAssetMinimumLoanSize) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) AddDEXDenom(context.Context, *MsgAddDEXDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDEXDenom not implemented")
}
func (UnimplementedMsgServer) UpdateDEXDenomMinimumLiquidity(context.Context, *MsgUpdateDEXDenomMinimumLiquidity) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDEXDenomMinimumLiquidity not implemented")
}
func (UnimplementedMsgServer) UpdateDEXDenomMinimumOrderSize(context.Context, *MsgUpdateDEXDenomMinimumOrderSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDEXDenomMinimumOrderSize not implemented")
}
func (UnimplementedMsgServer) AddKCoin(context.Context, *MsgAddKCoin) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKCoin not implemented")
}
func (UnimplementedMsgServer) UpdateKCoinSupply(context.Context, *MsgUpdateKCoinSupply) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKCoinSupply not implemented")
}
func (UnimplementedMsgServer) UpdateKCoinMintAmount(context.Context, *MsgUpdateKCoinMintAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKCoinMintAmount not implemented")
}
func (UnimplementedMsgServer) UpdateKCoinBurnAmount(context.Context, *MsgUpdateKCoinBurnAmount) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKCoinBurnAmount not implemented")
}
func (UnimplementedMsgServer) AddKCoinReferences(context.Context, *MsgAddKCoinReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKCoinReferences not implemented")
}
func (UnimplementedMsgServer) RemoveKCoinReferences(context.Context, *MsgRemoveKCoinReferences) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKCoinReferences not implemented")
}
func (UnimplementedMsgServer) AddCollateralDenom(context.Context, *MsgAddCollateralDenom) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollateralDenom not implemented")
}
func (UnimplementedMsgServer) UpdateCollateralDenomLTV(context.Context, *MsgUpdateCollateralDenomLTV) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollateralDenomLTV not implemented")
}
func (UnimplementedMsgServer) UpdateCollateralDenomMaxDeposit(context.Context, *MsgUpdateCollateralDenomMaxDeposit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollateralDenomMaxDeposit not implemented")
}
func (UnimplementedMsgServer) AddCAsset(context.Context, *MsgAddCAsset) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCAsset not implemented")
}
func (UnimplementedMsgServer) UpdateCAssetDexFeeShare(context.Context, *MsgUpdateCAssetDexFeeShare) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCAssetDexFeeShare not implemented")
}
func (UnimplementedMsgServer) UpdateCAssetBorrowLimit(context.Context, *MsgUpdateCAssetBorrowLimit) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCAssetBorrowLimit not implemented")
}
func (UnimplementedMsgServer) UpdateCAssetMinimumLoanSize(context.Context, *MsgUpdateCAssetMinimumLoanSize) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCAssetMinimumLoanSize not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_AddDEXDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddDEXDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddDEXDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddDEXDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddDEXDenom(ctx, req.(*MsgAddDEXDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDEXDenomMinimumLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDEXDenomMinimumLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDEXDenomMinimumLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDEXDenomMinimumLiquidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDEXDenomMinimumLiquidity(ctx, req.(*MsgUpdateDEXDenomMinimumLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDEXDenomMinimumOrderSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDEXDenomMinimumOrderSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDEXDenomMinimumOrderSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDEXDenomMinimumOrderSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDEXDenomMinimumOrderSize(ctx, req.(*MsgUpdateDEXDenomMinimumOrderSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddKCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddKCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddKCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddKCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddKCoin(ctx, req.(*MsgAddKCoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKCoinSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKCoinSupply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKCoinSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateKCoinSupply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKCoinSupply(ctx, req.(*MsgUpdateKCoinSupply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKCoinMintAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKCoinMintAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKCoinMintAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateKCoinMintAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKCoinMintAmount(ctx, req.(*MsgUpdateKCoinMintAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKCoinBurnAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKCoinBurnAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKCoinBurnAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateKCoinBurnAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKCoinBurnAmount(ctx, req.(*MsgUpdateKCoinBurnAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddKCoinReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddKCoinReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddKCoinReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddKCoinReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddKCoinReferences(ctx, req.(*MsgAddKCoinReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveKCoinReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveKCoinReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveKCoinReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveKCoinReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveKCoinReferences(ctx, req.(*MsgRemoveKCoinReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCollateralDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCollateralDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCollateralDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddCollateralDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCollateralDenom(ctx, req.(*MsgAddCollateralDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollateralDenomLTV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollateralDenomLTV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollateralDenomLTV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCollateralDenomLTV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollateralDenomLTV(ctx, req.(*MsgUpdateCollateralDenomLTV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollateralDenomMaxDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollateralDenomMaxDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollateralDenomMaxDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCollateralDenomMaxDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollateralDenomMaxDeposit(ctx, req.(*MsgUpdateCollateralDenomMaxDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddCAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCAsset(ctx, req.(*MsgAddCAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCAssetDexFeeShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCAssetDexFeeShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCAssetDexFeeShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCAssetDexFeeShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCAssetDexFeeShare(ctx, req.(*MsgUpdateCAssetDexFeeShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCAssetBorrowLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCAssetBorrowLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCAssetBorrowLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCAssetBorrowLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCAssetBorrowLimit(ctx, req.(*MsgUpdateCAssetBorrowLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCAssetMinimumLoanSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCAssetMinimumLoanSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCAssetMinimumLoanSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCAssetMinimumLoanSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCAssetMinimumLoanSize(ctx, req.(*MsgUpdateCAssetMinimumLoanSize))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.denominations.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDEXDenom",
			Handler:    _Msg_AddDEXDenom_Handler,
		},
		{
			MethodName: "UpdateDEXDenomMinimumLiquidity",
			Handler:    _Msg_UpdateDEXDenomMinimumLiquidity_Handler,
		},
		{
			MethodName: "UpdateDEXDenomMinimumOrderSize",
			Handler:    _Msg_UpdateDEXDenomMinimumOrderSize_Handler,
		},
		{
			MethodName: "AddKCoin",
			Handler:    _Msg_AddKCoin_Handler,
		},
		{
			MethodName: "UpdateKCoinSupply",
			Handler:    _Msg_UpdateKCoinSupply_Handler,
		},
		{
			MethodName: "UpdateKCoinMintAmount",
			Handler:    _Msg_UpdateKCoinMintAmount_Handler,
		},
		{
			MethodName: "UpdateKCoinBurnAmount",
			Handler:    _Msg_UpdateKCoinBurnAmount_Handler,
		},
		{
			MethodName: "AddKCoinReferences",
			Handler:    _Msg_AddKCoinReferences_Handler,
		},
		{
			MethodName: "RemoveKCoinReferences",
			Handler:    _Msg_RemoveKCoinReferences_Handler,
		},
		{
			MethodName: "AddCollateralDenom",
			Handler:    _Msg_AddCollateralDenom_Handler,
		},
		{
			MethodName: "UpdateCollateralDenomLTV",
			Handler:    _Msg_UpdateCollateralDenomLTV_Handler,
		},
		{
			MethodName: "UpdateCollateralDenomMaxDeposit",
			Handler:    _Msg_UpdateCollateralDenomMaxDeposit_Handler,
		},
		{
			MethodName: "AddCAsset",
			Handler:    _Msg_AddCAsset_Handler,
		},
		{
			MethodName: "UpdateCAssetDexFeeShare",
			Handler:    _Msg_UpdateCAssetDexFeeShare_Handler,
		},
		{
			MethodName: "UpdateCAssetBorrowLimit",
			Handler:    _Msg_UpdateCAssetBorrowLimit_Handler,
		},
		{
			MethodName: "UpdateCAssetMinimumLoanSize",
			Handler:    _Msg_UpdateCAssetMinimumLoanSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/denominations/tx.proto",
}
