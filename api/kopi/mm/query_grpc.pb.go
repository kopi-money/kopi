// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kopi/mm/query.proto

package mm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_FullBalance_FullMethodName                    = "/kopi.mm.Query/FullBalance"
	Query_GetCollateralStats_FullMethodName             = "/kopi.mm.Query/GetCollateralStats"
	Query_GetCollateralDenomStats_FullMethodName        = "/kopi.mm.Query/GetCollateralDenomStats"
	Query_GetCollateralUserStats_FullMethodName         = "/kopi.mm.Query/GetCollateralUserStats"
	Query_GetCollateralDenomUserStats_FullMethodName    = "/kopi.mm.Query/GetCollateralDenomUserStats"
	Query_GetWithdrawableCollateral_FullMethodName      = "/kopi.mm.Query/GetWithdrawableCollateral"
	Query_GetCreditLineUsage_FullMethodName             = "/kopi.mm.Query/GetCreditLineUsage"
	Query_GetDepositUserStats_FullMethodName            = "/kopi.mm.Query/GetDepositUserStats"
	Query_GetDepositUserDenomStats_FullMethodName       = "/kopi.mm.Query/GetDepositUserDenomStats"
	Query_GetDepositStats_FullMethodName                = "/kopi.mm.Query/GetDepositStats"
	Query_GetBorrowInterestRate_FullMethodName          = "/kopi.mm.Query/GetBorrowInterestRate"
	Query_GetLoansByDenom_FullMethodName                = "/kopi.mm.Query/GetLoansByDenom"
	Query_GetUserLoans_FullMethodName                   = "/kopi.mm.Query/GetUserLoans"
	Query_GetUserDenomLoan_FullMethodName               = "/kopi.mm.Query/GetUserDenomLoan"
	Query_GetAvailableToBorrow_FullMethodName           = "/kopi.mm.Query/GetAvailableToBorrow"
	Query_GetNumLoans_FullMethodName                    = "/kopi.mm.Query/GetNumLoans"
	Query_GetNumAddressLoans_FullMethodName             = "/kopi.mm.Query/GetNumAddressLoans"
	Query_GetLoansStats_FullMethodName                  = "/kopi.mm.Query/GetLoansStats"
	Query_GetValueLoans_FullMethodName                  = "/kopi.mm.Query/GetValueLoans"
	Query_Params_FullMethodName                         = "/kopi.mm.Query/Params"
	Query_GetRedemptionRequest_FullMethodName           = "/kopi.mm.Query/GetRedemptionRequest"
	Query_GetRedemptionsRequest_FullMethodName          = "/kopi.mm.Query/GetRedemptionsRequest"
	Query_GetRedemptionStatsRequest_FullMethodName      = "/kopi.mm.Query/GetRedemptionStatsRequest"
	Query_GetRedemptionDenomStatsRequest_FullMethodName = "/kopi.mm.Query/GetRedemptionDenomStatsRequest"
	Query_GetUserStats_FullMethodName                   = "/kopi.mm.Query/GetUserStats"
	Query_GetTotalValueLocked_FullMethodName            = "/kopi.mm.Query/GetTotalValueLocked"
	Query_GetVaultValues_FullMethodName                 = "/kopi.mm.Query/GetVaultValues"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	FullBalance(ctx context.Context, in *QueryFullBalanceRequest, opts ...grpc.CallOption) (*QueryFullBalanceResponse, error)
	GetCollateralStats(ctx context.Context, in *GetCollateralStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error)
	GetCollateralDenomStats(ctx context.Context, in *GetCollateralDenomStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomStatsResponse, error)
	GetCollateralUserStats(ctx context.Context, in *GetCollateralUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error)
	GetCollateralDenomUserStats(ctx context.Context, in *GetCollateralDenomUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomUserStatsResponse, error)
	GetWithdrawableCollateral(ctx context.Context, in *GetWithdrawableCollateralQuery, opts ...grpc.CallOption) (*GetWithdrawableCollateralResponse, error)
	GetCreditLineUsage(ctx context.Context, in *GetCreditLineUsageQuery, opts ...grpc.CallOption) (*GetCreditLineUsageResponse, error)
	GetDepositUserStats(ctx context.Context, in *GetDepositUserStatsQuery, opts ...grpc.CallOption) (*GetDepositUserStatsResponse, error)
	GetDepositUserDenomStats(ctx context.Context, in *GetDepositUserDenomStatsQuery, opts ...grpc.CallOption) (*DepositUserStats, error)
	GetDepositStats(ctx context.Context, in *GetDepositStatsQuery, opts ...grpc.CallOption) (*GetDepositStatsResponse, error)
	GetBorrowInterestRate(ctx context.Context, in *GetBorrowInterestRateQuery, opts ...grpc.CallOption) (*GetBorrowInterestRateResponse, error)
	GetLoansByDenom(ctx context.Context, in *GetLoansByDenomQuery, opts ...grpc.CallOption) (*GetLoansResponse, error)
	GetUserLoans(ctx context.Context, in *GetUserLoansQuery, opts ...grpc.CallOption) (*GetUserLoansResponse, error)
	GetUserDenomLoan(ctx context.Context, in *GetUserDenomLoanQuery, opts ...grpc.CallOption) (*GetUserDenomLoanResponse, error)
	GetAvailableToBorrow(ctx context.Context, in *GetAvailableToBorrowRequest, opts ...grpc.CallOption) (*GetAvailableToBorrowResponse, error)
	GetNumLoans(ctx context.Context, in *GetNumLoansQuery, opts ...grpc.CallOption) (*GetNumLoansResponse, error)
	GetNumAddressLoans(ctx context.Context, in *GetNumAddressLoansQuery, opts ...grpc.CallOption) (*GetNumAddressLoansResponse, error)
	GetLoansStats(ctx context.Context, in *GetLoanStatsQuery, opts ...grpc.CallOption) (*GetLoanStatsResponse, error)
	GetValueLoans(ctx context.Context, in *GetValueLoansQuery, opts ...grpc.CallOption) (*GetValueLoansResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetRedemptionRequest(ctx context.Context, in *GetRedemptionRequestQuery, opts ...grpc.CallOption) (*GetRedemptionRequestResponse, error)
	GetRedemptionsRequest(ctx context.Context, in *GetRedemptionsQuery, opts ...grpc.CallOption) (*GetRedemptionsResponse, error)
	GetRedemptionStatsRequest(ctx context.Context, in *GetRedemptionStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionStatsRequestResponse, error)
	GetRedemptionDenomStatsRequest(ctx context.Context, in *GetRedemptionDenomStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionDenomStatsRequestResponse, error)
	GetUserStats(ctx context.Context, in *GetUserStatsQuery, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	GetTotalValueLocked(ctx context.Context, in *GetTotalValueLockedQuery, opts ...grpc.CallOption) (*GetTotalValueLockedResponse, error)
	GetVaultValues(ctx context.Context, in *GetVaultValuesQuery, opts ...grpc.CallOption) (*GetVaultValuesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FullBalance(ctx context.Context, in *QueryFullBalanceRequest, opts ...grpc.CallOption) (*QueryFullBalanceResponse, error) {
	out := new(QueryFullBalanceResponse)
	err := c.cc.Invoke(ctx, Query_FullBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralStats(ctx context.Context, in *GetCollateralStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error) {
	out := new(GetCollateralStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetCollateralStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralDenomStats(ctx context.Context, in *GetCollateralDenomStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomStatsResponse, error) {
	out := new(GetCollateralDenomStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetCollateralDenomStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralUserStats(ctx context.Context, in *GetCollateralUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error) {
	out := new(GetCollateralStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetCollateralUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralDenomUserStats(ctx context.Context, in *GetCollateralDenomUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomUserStatsResponse, error) {
	out := new(GetCollateralDenomUserStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetCollateralDenomUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWithdrawableCollateral(ctx context.Context, in *GetWithdrawableCollateralQuery, opts ...grpc.CallOption) (*GetWithdrawableCollateralResponse, error) {
	out := new(GetWithdrawableCollateralResponse)
	err := c.cc.Invoke(ctx, Query_GetWithdrawableCollateral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCreditLineUsage(ctx context.Context, in *GetCreditLineUsageQuery, opts ...grpc.CallOption) (*GetCreditLineUsageResponse, error) {
	out := new(GetCreditLineUsageResponse)
	err := c.cc.Invoke(ctx, Query_GetCreditLineUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositUserStats(ctx context.Context, in *GetDepositUserStatsQuery, opts ...grpc.CallOption) (*GetDepositUserStatsResponse, error) {
	out := new(GetDepositUserStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetDepositUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositUserDenomStats(ctx context.Context, in *GetDepositUserDenomStatsQuery, opts ...grpc.CallOption) (*DepositUserStats, error) {
	out := new(DepositUserStats)
	err := c.cc.Invoke(ctx, Query_GetDepositUserDenomStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositStats(ctx context.Context, in *GetDepositStatsQuery, opts ...grpc.CallOption) (*GetDepositStatsResponse, error) {
	out := new(GetDepositStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetDepositStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBorrowInterestRate(ctx context.Context, in *GetBorrowInterestRateQuery, opts ...grpc.CallOption) (*GetBorrowInterestRateResponse, error) {
	out := new(GetBorrowInterestRateResponse)
	err := c.cc.Invoke(ctx, Query_GetBorrowInterestRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLoansByDenom(ctx context.Context, in *GetLoansByDenomQuery, opts ...grpc.CallOption) (*GetLoansResponse, error) {
	out := new(GetLoansResponse)
	err := c.cc.Invoke(ctx, Query_GetLoansByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserLoans(ctx context.Context, in *GetUserLoansQuery, opts ...grpc.CallOption) (*GetUserLoansResponse, error) {
	out := new(GetUserLoansResponse)
	err := c.cc.Invoke(ctx, Query_GetUserLoans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserDenomLoan(ctx context.Context, in *GetUserDenomLoanQuery, opts ...grpc.CallOption) (*GetUserDenomLoanResponse, error) {
	out := new(GetUserDenomLoanResponse)
	err := c.cc.Invoke(ctx, Query_GetUserDenomLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAvailableToBorrow(ctx context.Context, in *GetAvailableToBorrowRequest, opts ...grpc.CallOption) (*GetAvailableToBorrowResponse, error) {
	out := new(GetAvailableToBorrowResponse)
	err := c.cc.Invoke(ctx, Query_GetAvailableToBorrow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNumLoans(ctx context.Context, in *GetNumLoansQuery, opts ...grpc.CallOption) (*GetNumLoansResponse, error) {
	out := new(GetNumLoansResponse)
	err := c.cc.Invoke(ctx, Query_GetNumLoans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNumAddressLoans(ctx context.Context, in *GetNumAddressLoansQuery, opts ...grpc.CallOption) (*GetNumAddressLoansResponse, error) {
	out := new(GetNumAddressLoansResponse)
	err := c.cc.Invoke(ctx, Query_GetNumAddressLoans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLoansStats(ctx context.Context, in *GetLoanStatsQuery, opts ...grpc.CallOption) (*GetLoanStatsResponse, error) {
	out := new(GetLoanStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetLoansStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValueLoans(ctx context.Context, in *GetValueLoansQuery, opts ...grpc.CallOption) (*GetValueLoansResponse, error) {
	out := new(GetValueLoansResponse)
	err := c.cc.Invoke(ctx, Query_GetValueLoans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionRequest(ctx context.Context, in *GetRedemptionRequestQuery, opts ...grpc.CallOption) (*GetRedemptionRequestResponse, error) {
	out := new(GetRedemptionRequestResponse)
	err := c.cc.Invoke(ctx, Query_GetRedemptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionsRequest(ctx context.Context, in *GetRedemptionsQuery, opts ...grpc.CallOption) (*GetRedemptionsResponse, error) {
	out := new(GetRedemptionsResponse)
	err := c.cc.Invoke(ctx, Query_GetRedemptionsRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionStatsRequest(ctx context.Context, in *GetRedemptionStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionStatsRequestResponse, error) {
	out := new(GetRedemptionStatsRequestResponse)
	err := c.cc.Invoke(ctx, Query_GetRedemptionStatsRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionDenomStatsRequest(ctx context.Context, in *GetRedemptionDenomStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionDenomStatsRequestResponse, error) {
	out := new(GetRedemptionDenomStatsRequestResponse)
	err := c.cc.Invoke(ctx, Query_GetRedemptionDenomStatsRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserStats(ctx context.Context, in *GetUserStatsQuery, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalValueLocked(ctx context.Context, in *GetTotalValueLockedQuery, opts ...grpc.CallOption) (*GetTotalValueLockedResponse, error) {
	out := new(GetTotalValueLockedResponse)
	err := c.cc.Invoke(ctx, Query_GetTotalValueLocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVaultValues(ctx context.Context, in *GetVaultValuesQuery, opts ...grpc.CallOption) (*GetVaultValuesResponse, error) {
	out := new(GetVaultValuesResponse)
	err := c.cc.Invoke(ctx, Query_GetVaultValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	FullBalance(context.Context, *QueryFullBalanceRequest) (*QueryFullBalanceResponse, error)
	GetCollateralStats(context.Context, *GetCollateralStatsQuery) (*GetCollateralStatsResponse, error)
	GetCollateralDenomStats(context.Context, *GetCollateralDenomStatsQuery) (*GetCollateralDenomStatsResponse, error)
	GetCollateralUserStats(context.Context, *GetCollateralUserStatsQuery) (*GetCollateralStatsResponse, error)
	GetCollateralDenomUserStats(context.Context, *GetCollateralDenomUserStatsQuery) (*GetCollateralDenomUserStatsResponse, error)
	GetWithdrawableCollateral(context.Context, *GetWithdrawableCollateralQuery) (*GetWithdrawableCollateralResponse, error)
	GetCreditLineUsage(context.Context, *GetCreditLineUsageQuery) (*GetCreditLineUsageResponse, error)
	GetDepositUserStats(context.Context, *GetDepositUserStatsQuery) (*GetDepositUserStatsResponse, error)
	GetDepositUserDenomStats(context.Context, *GetDepositUserDenomStatsQuery) (*DepositUserStats, error)
	GetDepositStats(context.Context, *GetDepositStatsQuery) (*GetDepositStatsResponse, error)
	GetBorrowInterestRate(context.Context, *GetBorrowInterestRateQuery) (*GetBorrowInterestRateResponse, error)
	GetLoansByDenom(context.Context, *GetLoansByDenomQuery) (*GetLoansResponse, error)
	GetUserLoans(context.Context, *GetUserLoansQuery) (*GetUserLoansResponse, error)
	GetUserDenomLoan(context.Context, *GetUserDenomLoanQuery) (*GetUserDenomLoanResponse, error)
	GetAvailableToBorrow(context.Context, *GetAvailableToBorrowRequest) (*GetAvailableToBorrowResponse, error)
	GetNumLoans(context.Context, *GetNumLoansQuery) (*GetNumLoansResponse, error)
	GetNumAddressLoans(context.Context, *GetNumAddressLoansQuery) (*GetNumAddressLoansResponse, error)
	GetLoansStats(context.Context, *GetLoanStatsQuery) (*GetLoanStatsResponse, error)
	GetValueLoans(context.Context, *GetValueLoansQuery) (*GetValueLoansResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetRedemptionRequest(context.Context, *GetRedemptionRequestQuery) (*GetRedemptionRequestResponse, error)
	GetRedemptionsRequest(context.Context, *GetRedemptionsQuery) (*GetRedemptionsResponse, error)
	GetRedemptionStatsRequest(context.Context, *GetRedemptionStatsRequestQuery) (*GetRedemptionStatsRequestResponse, error)
	GetRedemptionDenomStatsRequest(context.Context, *GetRedemptionDenomStatsRequestQuery) (*GetRedemptionDenomStatsRequestResponse, error)
	GetUserStats(context.Context, *GetUserStatsQuery) (*GetUserStatsResponse, error)
	GetTotalValueLocked(context.Context, *GetTotalValueLockedQuery) (*GetTotalValueLockedResponse, error)
	GetVaultValues(context.Context, *GetVaultValuesQuery) (*GetVaultValuesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) FullBalance(context.Context, *QueryFullBalanceRequest) (*QueryFullBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullBalance not implemented")
}
func (UnimplementedQueryServer) GetCollateralStats(context.Context, *GetCollateralStatsQuery) (*GetCollateralStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralStats not implemented")
}
func (UnimplementedQueryServer) GetCollateralDenomStats(context.Context, *GetCollateralDenomStatsQuery) (*GetCollateralDenomStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralDenomStats not implemented")
}
func (UnimplementedQueryServer) GetCollateralUserStats(context.Context, *GetCollateralUserStatsQuery) (*GetCollateralStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralUserStats not implemented")
}
func (UnimplementedQueryServer) GetCollateralDenomUserStats(context.Context, *GetCollateralDenomUserStatsQuery) (*GetCollateralDenomUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralDenomUserStats not implemented")
}
func (UnimplementedQueryServer) GetWithdrawableCollateral(context.Context, *GetWithdrawableCollateralQuery) (*GetWithdrawableCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawableCollateral not implemented")
}
func (UnimplementedQueryServer) GetCreditLineUsage(context.Context, *GetCreditLineUsageQuery) (*GetCreditLineUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditLineUsage not implemented")
}
func (UnimplementedQueryServer) GetDepositUserStats(context.Context, *GetDepositUserStatsQuery) (*GetDepositUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositUserStats not implemented")
}
func (UnimplementedQueryServer) GetDepositUserDenomStats(context.Context, *GetDepositUserDenomStatsQuery) (*DepositUserStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositUserDenomStats not implemented")
}
func (UnimplementedQueryServer) GetDepositStats(context.Context, *GetDepositStatsQuery) (*GetDepositStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositStats not implemented")
}
func (UnimplementedQueryServer) GetBorrowInterestRate(context.Context, *GetBorrowInterestRateQuery) (*GetBorrowInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowInterestRate not implemented")
}
func (UnimplementedQueryServer) GetLoansByDenom(context.Context, *GetLoansByDenomQuery) (*GetLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoansByDenom not implemented")
}
func (UnimplementedQueryServer) GetUserLoans(context.Context, *GetUserLoansQuery) (*GetUserLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoans not implemented")
}
func (UnimplementedQueryServer) GetUserDenomLoan(context.Context, *GetUserDenomLoanQuery) (*GetUserDenomLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDenomLoan not implemented")
}
func (UnimplementedQueryServer) GetAvailableToBorrow(context.Context, *GetAvailableToBorrowRequest) (*GetAvailableToBorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableToBorrow not implemented")
}
func (UnimplementedQueryServer) GetNumLoans(context.Context, *GetNumLoansQuery) (*GetNumLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumLoans not implemented")
}
func (UnimplementedQueryServer) GetNumAddressLoans(context.Context, *GetNumAddressLoansQuery) (*GetNumAddressLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumAddressLoans not implemented")
}
func (UnimplementedQueryServer) GetLoansStats(context.Context, *GetLoanStatsQuery) (*GetLoanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoansStats not implemented")
}
func (UnimplementedQueryServer) GetValueLoans(context.Context, *GetValueLoansQuery) (*GetValueLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueLoans not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetRedemptionRequest(context.Context, *GetRedemptionRequestQuery) (*GetRedemptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionRequest not implemented")
}
func (UnimplementedQueryServer) GetRedemptionsRequest(context.Context, *GetRedemptionsQuery) (*GetRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionsRequest not implemented")
}
func (UnimplementedQueryServer) GetRedemptionStatsRequest(context.Context, *GetRedemptionStatsRequestQuery) (*GetRedemptionStatsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionStatsRequest not implemented")
}
func (UnimplementedQueryServer) GetRedemptionDenomStatsRequest(context.Context, *GetRedemptionDenomStatsRequestQuery) (*GetRedemptionDenomStatsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionDenomStatsRequest not implemented")
}
func (UnimplementedQueryServer) GetUserStats(context.Context, *GetUserStatsQuery) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedQueryServer) GetTotalValueLocked(context.Context, *GetTotalValueLockedQuery) (*GetTotalValueLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalValueLocked not implemented")
}
func (UnimplementedQueryServer) GetVaultValues(context.Context, *GetVaultValuesQuery) (*GetVaultValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaultValues not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_FullBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FullBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullBalance(ctx, req.(*QueryFullBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCollateralStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralStats(ctx, req.(*GetCollateralStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralDenomStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralDenomStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralDenomStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCollateralDenomStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralDenomStats(ctx, req.(*GetCollateralDenomStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCollateralUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralUserStats(ctx, req.(*GetCollateralUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralDenomUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralDenomUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralDenomUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCollateralDenomUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralDenomUserStats(ctx, req.(*GetCollateralDenomUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWithdrawableCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawableCollateralQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWithdrawableCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWithdrawableCollateral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWithdrawableCollateral(ctx, req.(*GetWithdrawableCollateralQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCreditLineUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditLineUsageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCreditLineUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCreditLineUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCreditLineUsage(ctx, req.(*GetCreditLineUsageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDepositUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositUserStats(ctx, req.(*GetDepositUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositUserDenomStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositUserDenomStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositUserDenomStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDepositUserDenomStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositUserDenomStats(ctx, req.(*GetDepositUserDenomStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDepositStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositStats(ctx, req.(*GetDepositStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBorrowInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowInterestRateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBorrowInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBorrowInterestRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBorrowInterestRate(ctx, req.(*GetBorrowInterestRateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLoansByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoansByDenomQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLoansByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLoansByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLoansByDenom(ctx, req.(*GetLoansByDenomQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUserLoans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserLoans(ctx, req.(*GetUserLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserDenomLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDenomLoanQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserDenomLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUserDenomLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserDenomLoan(ctx, req.(*GetUserDenomLoanQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAvailableToBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableToBorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAvailableToBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAvailableToBorrow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAvailableToBorrow(ctx, req.(*GetAvailableToBorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNumLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNumLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNumLoans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNumLoans(ctx, req.(*GetNumLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNumAddressLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumAddressLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNumAddressLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNumAddressLoans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNumAddressLoans(ctx, req.(*GetNumAddressLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLoansStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLoansStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLoansStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLoansStats(ctx, req.(*GetLoanStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValueLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValueLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetValueLoans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValueLoans(ctx, req.(*GetValueLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRedemptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionRequest(ctx, req.(*GetRedemptionRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRedemptionsRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionsRequest(ctx, req.(*GetRedemptionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionStatsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionStatsRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionStatsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRedemptionStatsRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionStatsRequest(ctx, req.(*GetRedemptionStatsRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionDenomStatsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionDenomStatsRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionDenomStatsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRedemptionDenomStatsRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionDenomStatsRequest(ctx, req.(*GetRedemptionDenomStatsRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserStats(ctx, req.(*GetUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalValueLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalValueLockedQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalValueLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTotalValueLocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalValueLocked(ctx, req.(*GetTotalValueLockedQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVaultValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultValuesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVaultValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetVaultValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVaultValues(ctx, req.(*GetVaultValuesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.mm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FullBalance",
			Handler:    _Query_FullBalance_Handler,
		},
		{
			MethodName: "GetCollateralStats",
			Handler:    _Query_GetCollateralStats_Handler,
		},
		{
			MethodName: "GetCollateralDenomStats",
			Handler:    _Query_GetCollateralDenomStats_Handler,
		},
		{
			MethodName: "GetCollateralUserStats",
			Handler:    _Query_GetCollateralUserStats_Handler,
		},
		{
			MethodName: "GetCollateralDenomUserStats",
			Handler:    _Query_GetCollateralDenomUserStats_Handler,
		},
		{
			MethodName: "GetWithdrawableCollateral",
			Handler:    _Query_GetWithdrawableCollateral_Handler,
		},
		{
			MethodName: "GetCreditLineUsage",
			Handler:    _Query_GetCreditLineUsage_Handler,
		},
		{
			MethodName: "GetDepositUserStats",
			Handler:    _Query_GetDepositUserStats_Handler,
		},
		{
			MethodName: "GetDepositUserDenomStats",
			Handler:    _Query_GetDepositUserDenomStats_Handler,
		},
		{
			MethodName: "GetDepositStats",
			Handler:    _Query_GetDepositStats_Handler,
		},
		{
			MethodName: "GetBorrowInterestRate",
			Handler:    _Query_GetBorrowInterestRate_Handler,
		},
		{
			MethodName: "GetLoansByDenom",
			Handler:    _Query_GetLoansByDenom_Handler,
		},
		{
			MethodName: "GetUserLoans",
			Handler:    _Query_GetUserLoans_Handler,
		},
		{
			MethodName: "GetUserDenomLoan",
			Handler:    _Query_GetUserDenomLoan_Handler,
		},
		{
			MethodName: "GetAvailableToBorrow",
			Handler:    _Query_GetAvailableToBorrow_Handler,
		},
		{
			MethodName: "GetNumLoans",
			Handler:    _Query_GetNumLoans_Handler,
		},
		{
			MethodName: "GetNumAddressLoans",
			Handler:    _Query_GetNumAddressLoans_Handler,
		},
		{
			MethodName: "GetLoansStats",
			Handler:    _Query_GetLoansStats_Handler,
		},
		{
			MethodName: "GetValueLoans",
			Handler:    _Query_GetValueLoans_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetRedemptionRequest",
			Handler:    _Query_GetRedemptionRequest_Handler,
		},
		{
			MethodName: "GetRedemptionsRequest",
			Handler:    _Query_GetRedemptionsRequest_Handler,
		},
		{
			MethodName: "GetRedemptionStatsRequest",
			Handler:    _Query_GetRedemptionStatsRequest_Handler,
		},
		{
			MethodName: "GetRedemptionDenomStatsRequest",
			Handler:    _Query_GetRedemptionDenomStatsRequest_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _Query_GetUserStats_Handler,
		},
		{
			MethodName: "GetTotalValueLocked",
			Handler:    _Query_GetTotalValueLocked_Handler,
		},
		{
			MethodName: "GetVaultValues",
			Handler:    _Query_GetVaultValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/mm/query.proto",
}
