// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/mm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetRedemptionsQuery struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetRedemptionsQuery) Reset()         { *m = GetRedemptionsQuery{} }
func (m *GetRedemptionsQuery) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionsQuery) ProtoMessage()    {}
func (*GetRedemptionsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{0}
}
func (m *GetRedemptionsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionsQuery.Merge(m, src)
}
func (m *GetRedemptionsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionsQuery proto.InternalMessageInfo

func (m *GetRedemptionsQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type RedemptionRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee     string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *RedemptionRequest) Reset()         { *m = RedemptionRequest{} }
func (m *RedemptionRequest) String() string { return proto.CompactTextString(m) }
func (*RedemptionRequest) ProtoMessage()    {}
func (*RedemptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{1}
}
func (m *RedemptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedemptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedemptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedemptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedemptionRequest.Merge(m, src)
}
func (m *RedemptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RedemptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RedemptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RedemptionRequest proto.InternalMessageInfo

func (m *RedemptionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedemptionRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *RedemptionRequest) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

type GetRedemptionsResponse struct {
	Requests []*RedemptionRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *GetRedemptionsResponse) Reset()         { *m = GetRedemptionsResponse{} }
func (m *GetRedemptionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionsResponse) ProtoMessage()    {}
func (*GetRedemptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{2}
}
func (m *GetRedemptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionsResponse.Merge(m, src)
}
func (m *GetRedemptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionsResponse proto.InternalMessageInfo

func (m *GetRedemptionsResponse) GetRequests() []*RedemptionRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type GetRedemptionStatsRequestQuery struct {
}

func (m *GetRedemptionStatsRequestQuery) Reset()         { *m = GetRedemptionStatsRequestQuery{} }
func (m *GetRedemptionStatsRequestQuery) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionStatsRequestQuery) ProtoMessage()    {}
func (*GetRedemptionStatsRequestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{3}
}
func (m *GetRedemptionStatsRequestQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionStatsRequestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionStatsRequestQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionStatsRequestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionStatsRequestQuery.Merge(m, src)
}
func (m *GetRedemptionStatsRequestQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionStatsRequestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionStatsRequestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionStatsRequestQuery proto.InternalMessageInfo

type GetRedemptionStatsRequestResponse struct {
	NumRequests    int64  `protobuf:"varint,1,opt,name=num_requests,json=numRequests,proto3" json:"num_requests,omitempty"`
	WithdrawSumUsd string `protobuf:"bytes,2,opt,name=withdraw_sum_usd,json=withdrawSumUsd,proto3" json:"withdraw_sum_usd,omitempty"`
}

func (m *GetRedemptionStatsRequestResponse) Reset()         { *m = GetRedemptionStatsRequestResponse{} }
func (m *GetRedemptionStatsRequestResponse) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionStatsRequestResponse) ProtoMessage()    {}
func (*GetRedemptionStatsRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{4}
}
func (m *GetRedemptionStatsRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionStatsRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionStatsRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionStatsRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionStatsRequestResponse.Merge(m, src)
}
func (m *GetRedemptionStatsRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionStatsRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionStatsRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionStatsRequestResponse proto.InternalMessageInfo

func (m *GetRedemptionStatsRequestResponse) GetNumRequests() int64 {
	if m != nil {
		return m.NumRequests
	}
	return 0
}

func (m *GetRedemptionStatsRequestResponse) GetWithdrawSumUsd() string {
	if m != nil {
		return m.WithdrawSumUsd
	}
	return ""
}

type GetRedemptionDenomStatsRequestQuery struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetRedemptionDenomStatsRequestQuery) Reset()         { *m = GetRedemptionDenomStatsRequestQuery{} }
func (m *GetRedemptionDenomStatsRequestQuery) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionDenomStatsRequestQuery) ProtoMessage()    {}
func (*GetRedemptionDenomStatsRequestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{5}
}
func (m *GetRedemptionDenomStatsRequestQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionDenomStatsRequestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionDenomStatsRequestQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionDenomStatsRequestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionDenomStatsRequestQuery.Merge(m, src)
}
func (m *GetRedemptionDenomStatsRequestQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionDenomStatsRequestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionDenomStatsRequestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionDenomStatsRequestQuery proto.InternalMessageInfo

func (m *GetRedemptionDenomStatsRequestQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetRedemptionDenomStatsRequestResponse struct {
	MaxFee      string `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	WithdrawSum string `protobuf:"bytes,2,opt,name=withdraw_sum,json=withdrawSum,proto3" json:"withdraw_sum,omitempty"`
	NumRequests int64  `protobuf:"varint,3,opt,name=num_requests,json=numRequests,proto3" json:"num_requests,omitempty"`
}

func (m *GetRedemptionDenomStatsRequestResponse) Reset() {
	*m = GetRedemptionDenomStatsRequestResponse{}
}
func (m *GetRedemptionDenomStatsRequestResponse) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionDenomStatsRequestResponse) ProtoMessage()    {}
func (*GetRedemptionDenomStatsRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{6}
}
func (m *GetRedemptionDenomStatsRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionDenomStatsRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionDenomStatsRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionDenomStatsRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionDenomStatsRequestResponse.Merge(m, src)
}
func (m *GetRedemptionDenomStatsRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionDenomStatsRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionDenomStatsRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionDenomStatsRequestResponse proto.InternalMessageInfo

func (m *GetRedemptionDenomStatsRequestResponse) GetMaxFee() string {
	if m != nil {
		return m.MaxFee
	}
	return ""
}

func (m *GetRedemptionDenomStatsRequestResponse) GetWithdrawSum() string {
	if m != nil {
		return m.WithdrawSum
	}
	return ""
}

func (m *GetRedemptionDenomStatsRequestResponse) GetNumRequests() int64 {
	if m != nil {
		return m.NumRequests
	}
	return 0
}

type GetRedemptionRequestQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetRedemptionRequestQuery) Reset()         { *m = GetRedemptionRequestQuery{} }
func (m *GetRedemptionRequestQuery) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionRequestQuery) ProtoMessage()    {}
func (*GetRedemptionRequestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{7}
}
func (m *GetRedemptionRequestQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionRequestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionRequestQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionRequestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionRequestQuery.Merge(m, src)
}
func (m *GetRedemptionRequestQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionRequestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionRequestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionRequestQuery proto.InternalMessageInfo

func (m *GetRedemptionRequestQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetRedemptionRequestQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetRedemptionRequestResponse struct {
	Fee          string `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	CAssetAmount string `protobuf:"bytes,2,opt,name=c_asset_amount,json=cAssetAmount,proto3" json:"c_asset_amount,omitempty"`
}

func (m *GetRedemptionRequestResponse) Reset()         { *m = GetRedemptionRequestResponse{} }
func (m *GetRedemptionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*GetRedemptionRequestResponse) ProtoMessage()    {}
func (*GetRedemptionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{8}
}
func (m *GetRedemptionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRedemptionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRedemptionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRedemptionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedemptionRequestResponse.Merge(m, src)
}
func (m *GetRedemptionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRedemptionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedemptionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedemptionRequestResponse proto.InternalMessageInfo

func (m *GetRedemptionRequestResponse) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *GetRedemptionRequestResponse) GetCAssetAmount() string {
	if m != nil {
		return m.CAssetAmount
	}
	return ""
}

type GetDepositUserDenomStatsQuery struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetDepositUserDenomStatsQuery) Reset()         { *m = GetDepositUserDenomStatsQuery{} }
func (m *GetDepositUserDenomStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetDepositUserDenomStatsQuery) ProtoMessage()    {}
func (*GetDepositUserDenomStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{9}
}
func (m *GetDepositUserDenomStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepositUserDenomStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepositUserDenomStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepositUserDenomStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepositUserDenomStatsQuery.Merge(m, src)
}
func (m *GetDepositUserDenomStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetDepositUserDenomStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepositUserDenomStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepositUserDenomStatsQuery proto.InternalMessageInfo

func (m *GetDepositUserDenomStatsQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GetDepositUserDenomStatsQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetCollateralDenomStatsQuery struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetCollateralDenomStatsQuery) Reset()         { *m = GetCollateralDenomStatsQuery{} }
func (m *GetCollateralDenomStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetCollateralDenomStatsQuery) ProtoMessage()    {}
func (*GetCollateralDenomStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{10}
}
func (m *GetCollateralDenomStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralDenomStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralDenomStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralDenomStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralDenomStatsQuery.Merge(m, src)
}
func (m *GetCollateralDenomStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralDenomStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralDenomStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralDenomStatsQuery proto.InternalMessageInfo

func (m *GetCollateralDenomStatsQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type UserCollateral struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *UserCollateral) Reset()         { *m = UserCollateral{} }
func (m *UserCollateral) String() string { return proto.CompactTextString(m) }
func (*UserCollateral) ProtoMessage()    {}
func (*UserCollateral) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{11}
}
func (m *UserCollateral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCollateral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCollateral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCollateral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCollateral.Merge(m, src)
}
func (m *UserCollateral) XXX_Size() int {
	return m.Size()
}
func (m *UserCollateral) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCollateral.DiscardUnknown(m)
}

var xxx_messageInfo_UserCollateral proto.InternalMessageInfo

func (m *UserCollateral) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserCollateral) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type GetCollateralDenomStatsResponse struct {
	UserCollateral []*UserCollateral `protobuf:"bytes,1,rep,name=user_collateral,json=userCollateral,proto3" json:"user_collateral,omitempty"`
	Sum            string            `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	SumUsd         string            `protobuf:"bytes,3,opt,name=sum_usd,json=sumUsd,proto3" json:"sum_usd,omitempty"`
}

func (m *GetCollateralDenomStatsResponse) Reset()         { *m = GetCollateralDenomStatsResponse{} }
func (m *GetCollateralDenomStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCollateralDenomStatsResponse) ProtoMessage()    {}
func (*GetCollateralDenomStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{12}
}
func (m *GetCollateralDenomStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralDenomStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralDenomStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralDenomStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralDenomStatsResponse.Merge(m, src)
}
func (m *GetCollateralDenomStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralDenomStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralDenomStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralDenomStatsResponse proto.InternalMessageInfo

func (m *GetCollateralDenomStatsResponse) GetUserCollateral() []*UserCollateral {
	if m != nil {
		return m.UserCollateral
	}
	return nil
}

func (m *GetCollateralDenomStatsResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *GetCollateralDenomStatsResponse) GetSumUsd() string {
	if m != nil {
		return m.SumUsd
	}
	return ""
}

type GetLoansByDenomQuery struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetLoansByDenomQuery) Reset()         { *m = GetLoansByDenomQuery{} }
func (m *GetLoansByDenomQuery) String() string { return proto.CompactTextString(m) }
func (*GetLoansByDenomQuery) ProtoMessage()    {}
func (*GetLoansByDenomQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{13}
}
func (m *GetLoansByDenomQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoansByDenomQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoansByDenomQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoansByDenomQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoansByDenomQuery.Merge(m, src)
}
func (m *GetLoansByDenomQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetLoansByDenomQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoansByDenomQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoansByDenomQuery proto.InternalMessageInfo

func (m *GetLoansByDenomQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type UserLoan struct {
	Denom             string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	AmountBorrowed    string `protobuf:"bytes,2,opt,name=amount_borrowed,json=amountBorrowed,proto3" json:"amount_borrowed,omitempty"`
	AmountBorrowedUsd string `protobuf:"bytes,3,opt,name=amount_borrowed_usd,json=amountBorrowedUsd,proto3" json:"amount_borrowed_usd,omitempty"`
	InterestRate      string `protobuf:"bytes,6,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
}

func (m *UserLoan) Reset()         { *m = UserLoan{} }
func (m *UserLoan) String() string { return proto.CompactTextString(m) }
func (*UserLoan) ProtoMessage()    {}
func (*UserLoan) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{14}
}
func (m *UserLoan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoan.Merge(m, src)
}
func (m *UserLoan) XXX_Size() int {
	return m.Size()
}
func (m *UserLoan) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoan.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoan proto.InternalMessageInfo

func (m *UserLoan) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UserLoan) GetAmountBorrowed() string {
	if m != nil {
		return m.AmountBorrowed
	}
	return ""
}

func (m *UserLoan) GetAmountBorrowedUsd() string {
	if m != nil {
		return m.AmountBorrowedUsd
	}
	return ""
}

func (m *UserLoan) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

type GetLoansResponse struct {
	Loans []*UserLoan `protobuf:"bytes,1,rep,name=loans,proto3" json:"loans,omitempty"`
}

func (m *GetLoansResponse) Reset()         { *m = GetLoansResponse{} }
func (m *GetLoansResponse) String() string { return proto.CompactTextString(m) }
func (*GetLoansResponse) ProtoMessage()    {}
func (*GetLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{15}
}
func (m *GetLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoansResponse.Merge(m, src)
}
func (m *GetLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoansResponse proto.InternalMessageInfo

func (m *GetLoansResponse) GetLoans() []*UserLoan {
	if m != nil {
		return m.Loans
	}
	return nil
}

type GetLoanStatsQuery struct {
}

func (m *GetLoanStatsQuery) Reset()         { *m = GetLoanStatsQuery{} }
func (m *GetLoanStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetLoanStatsQuery) ProtoMessage()    {}
func (*GetLoanStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{16}
}
func (m *GetLoanStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoanStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoanStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoanStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoanStatsQuery.Merge(m, src)
}
func (m *GetLoanStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetLoanStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoanStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoanStatsQuery proto.InternalMessageInfo

type DenomLoanStat struct {
	Denom                string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	UtilityRate          string `protobuf:"bytes,2,opt,name=utility_rate,json=utilityRate,proto3" json:"utility_rate,omitempty"`
	InterestRate         string `protobuf:"bytes,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	AvailableToBorrow    string `protobuf:"bytes,4,opt,name=available_to_borrow,json=availableToBorrow,proto3" json:"available_to_borrow,omitempty"`
	AvailableToBorrowUsd string `protobuf:"bytes,5,opt,name=available_to_borrow_usd,json=availableToBorrowUsd,proto3" json:"available_to_borrow_usd,omitempty"`
	LoanSum              string `protobuf:"bytes,6,opt,name=loan_sum,json=loanSum,proto3" json:"loan_sum,omitempty"`
	LoanSumUsd           string `protobuf:"bytes,7,opt,name=loan_sum_usd,json=loanSumUsd,proto3" json:"loan_sum_usd,omitempty"`
}

func (m *DenomLoanStat) Reset()         { *m = DenomLoanStat{} }
func (m *DenomLoanStat) String() string { return proto.CompactTextString(m) }
func (*DenomLoanStat) ProtoMessage()    {}
func (*DenomLoanStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{17}
}
func (m *DenomLoanStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomLoanStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomLoanStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomLoanStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomLoanStat.Merge(m, src)
}
func (m *DenomLoanStat) XXX_Size() int {
	return m.Size()
}
func (m *DenomLoanStat) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomLoanStat.DiscardUnknown(m)
}

var xxx_messageInfo_DenomLoanStat proto.InternalMessageInfo

func (m *DenomLoanStat) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomLoanStat) GetUtilityRate() string {
	if m != nil {
		return m.UtilityRate
	}
	return ""
}

func (m *DenomLoanStat) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

func (m *DenomLoanStat) GetAvailableToBorrow() string {
	if m != nil {
		return m.AvailableToBorrow
	}
	return ""
}

func (m *DenomLoanStat) GetAvailableToBorrowUsd() string {
	if m != nil {
		return m.AvailableToBorrowUsd
	}
	return ""
}

func (m *DenomLoanStat) GetLoanSum() string {
	if m != nil {
		return m.LoanSum
	}
	return ""
}

func (m *DenomLoanStat) GetLoanSumUsd() string {
	if m != nil {
		return m.LoanSumUsd
	}
	return ""
}

type GetLoanStatsResponse struct {
	LoanStats                 []*DenomLoanStat `protobuf:"bytes,1,rep,name=loan_stats,json=loanStats,proto3" json:"loan_stats,omitempty"`
	TotalAvailableToBorrowUsd string           `protobuf:"bytes,2,opt,name=total_available_to_borrow_usd,json=totalAvailableToBorrowUsd,proto3" json:"total_available_to_borrow_usd,omitempty"`
	TotalLoanSumUsd           string           `protobuf:"bytes,3,opt,name=total_loan_sum_usd,json=totalLoanSumUsd,proto3" json:"total_loan_sum_usd,omitempty"`
}

func (m *GetLoanStatsResponse) Reset()         { *m = GetLoanStatsResponse{} }
func (m *GetLoanStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLoanStatsResponse) ProtoMessage()    {}
func (*GetLoanStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{18}
}
func (m *GetLoanStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoanStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoanStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoanStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoanStatsResponse.Merge(m, src)
}
func (m *GetLoanStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLoanStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoanStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoanStatsResponse proto.InternalMessageInfo

func (m *GetLoanStatsResponse) GetLoanStats() []*DenomLoanStat {
	if m != nil {
		return m.LoanStats
	}
	return nil
}

func (m *GetLoanStatsResponse) GetTotalAvailableToBorrowUsd() string {
	if m != nil {
		return m.TotalAvailableToBorrowUsd
	}
	return ""
}

func (m *GetLoanStatsResponse) GetTotalLoanSumUsd() string {
	if m != nil {
		return m.TotalLoanSumUsd
	}
	return ""
}

type GetAvailableToBorrowRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetAvailableToBorrowRequest) Reset()         { *m = GetAvailableToBorrowRequest{} }
func (m *GetAvailableToBorrowRequest) String() string { return proto.CompactTextString(m) }
func (*GetAvailableToBorrowRequest) ProtoMessage()    {}
func (*GetAvailableToBorrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{19}
}
func (m *GetAvailableToBorrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAvailableToBorrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAvailableToBorrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAvailableToBorrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableToBorrowRequest.Merge(m, src)
}
func (m *GetAvailableToBorrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAvailableToBorrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableToBorrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableToBorrowRequest proto.InternalMessageInfo

func (m *GetAvailableToBorrowRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAvailableToBorrowRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetAvailableToBorrowResponse struct {
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd string `protobuf:"bytes,2,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
}

func (m *GetAvailableToBorrowResponse) Reset()         { *m = GetAvailableToBorrowResponse{} }
func (m *GetAvailableToBorrowResponse) String() string { return proto.CompactTextString(m) }
func (*GetAvailableToBorrowResponse) ProtoMessage()    {}
func (*GetAvailableToBorrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{20}
}
func (m *GetAvailableToBorrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAvailableToBorrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAvailableToBorrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAvailableToBorrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableToBorrowResponse.Merge(m, src)
}
func (m *GetAvailableToBorrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAvailableToBorrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableToBorrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableToBorrowResponse proto.InternalMessageInfo

func (m *GetAvailableToBorrowResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *GetAvailableToBorrowResponse) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

type GetWithdrawableCollateralQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetWithdrawableCollateralQuery) Reset()         { *m = GetWithdrawableCollateralQuery{} }
func (m *GetWithdrawableCollateralQuery) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawableCollateralQuery) ProtoMessage()    {}
func (*GetWithdrawableCollateralQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{21}
}
func (m *GetWithdrawableCollateralQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawableCollateralQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawableCollateralQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawableCollateralQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawableCollateralQuery.Merge(m, src)
}
func (m *GetWithdrawableCollateralQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawableCollateralQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawableCollateralQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawableCollateralQuery proto.InternalMessageInfo

func (m *GetWithdrawableCollateralQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetWithdrawableCollateralQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetWithdrawableCollateralResponse struct {
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd string `protobuf:"bytes,2,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
}

func (m *GetWithdrawableCollateralResponse) Reset()         { *m = GetWithdrawableCollateralResponse{} }
func (m *GetWithdrawableCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawableCollateralResponse) ProtoMessage()    {}
func (*GetWithdrawableCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{22}
}
func (m *GetWithdrawableCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawableCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawableCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawableCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawableCollateralResponse.Merge(m, src)
}
func (m *GetWithdrawableCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawableCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawableCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawableCollateralResponse proto.InternalMessageInfo

func (m *GetWithdrawableCollateralResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *GetWithdrawableCollateralResponse) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

type Vault struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	LoanSum string `protobuf:"bytes,3,opt,name=loan_sum,json=loanSum,proto3" json:"loan_sum,omitempty"`
	Supply  string `protobuf:"bytes,4,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{23}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Vault) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *Vault) GetLoanSum() string {
	if m != nil {
		return m.LoanSum
	}
	return ""
}

func (m *Vault) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

type GetVaultValuesResponse struct {
	Vaults []*Vault `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults,omitempty"`
}

func (m *GetVaultValuesResponse) Reset()         { *m = GetVaultValuesResponse{} }
func (m *GetVaultValuesResponse) String() string { return proto.CompactTextString(m) }
func (*GetVaultValuesResponse) ProtoMessage()    {}
func (*GetVaultValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{24}
}
func (m *GetVaultValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVaultValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVaultValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVaultValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVaultValuesResponse.Merge(m, src)
}
func (m *GetVaultValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVaultValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVaultValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVaultValuesResponse proto.InternalMessageInfo

func (m *GetVaultValuesResponse) GetVaults() []*Vault {
	if m != nil {
		return m.Vaults
	}
	return nil
}

type GetVaultValuesQuery struct {
}

func (m *GetVaultValuesQuery) Reset()         { *m = GetVaultValuesQuery{} }
func (m *GetVaultValuesQuery) String() string { return proto.CompactTextString(m) }
func (*GetVaultValuesQuery) ProtoMessage()    {}
func (*GetVaultValuesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{25}
}
func (m *GetVaultValuesQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVaultValuesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVaultValuesQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVaultValuesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVaultValuesQuery.Merge(m, src)
}
func (m *GetVaultValuesQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetVaultValuesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVaultValuesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetVaultValuesQuery proto.InternalMessageInfo

type GetUserDenomLoanQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetUserDenomLoanQuery) Reset()         { *m = GetUserDenomLoanQuery{} }
func (m *GetUserDenomLoanQuery) String() string { return proto.CompactTextString(m) }
func (*GetUserDenomLoanQuery) ProtoMessage()    {}
func (*GetUserDenomLoanQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{26}
}
func (m *GetUserDenomLoanQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserDenomLoanQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserDenomLoanQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserDenomLoanQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserDenomLoanQuery.Merge(m, src)
}
func (m *GetUserDenomLoanQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetUserDenomLoanQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserDenomLoanQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserDenomLoanQuery proto.InternalMessageInfo

func (m *GetUserDenomLoanQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetUserDenomLoanQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetUserDenomLoanResponse struct {
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd string `protobuf:"bytes,2,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
}

func (m *GetUserDenomLoanResponse) Reset()         { *m = GetUserDenomLoanResponse{} }
func (m *GetUserDenomLoanResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserDenomLoanResponse) ProtoMessage()    {}
func (*GetUserDenomLoanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{27}
}
func (m *GetUserDenomLoanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserDenomLoanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserDenomLoanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserDenomLoanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserDenomLoanResponse.Merge(m, src)
}
func (m *GetUserDenomLoanResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserDenomLoanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserDenomLoanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserDenomLoanResponse proto.InternalMessageInfo

func (m *GetUserDenomLoanResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *GetUserDenomLoanResponse) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

type GetBorrowInterestRateQuery struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetBorrowInterestRateQuery) Reset()         { *m = GetBorrowInterestRateQuery{} }
func (m *GetBorrowInterestRateQuery) String() string { return proto.CompactTextString(m) }
func (*GetBorrowInterestRateQuery) ProtoMessage()    {}
func (*GetBorrowInterestRateQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{28}
}
func (m *GetBorrowInterestRateQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBorrowInterestRateQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBorrowInterestRateQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBorrowInterestRateQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBorrowInterestRateQuery.Merge(m, src)
}
func (m *GetBorrowInterestRateQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetBorrowInterestRateQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBorrowInterestRateQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetBorrowInterestRateQuery proto.InternalMessageInfo

func (m *GetBorrowInterestRateQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetBorrowInterestRateResponse struct {
	InterestRate string `protobuf:"bytes,1,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
}

func (m *GetBorrowInterestRateResponse) Reset()         { *m = GetBorrowInterestRateResponse{} }
func (m *GetBorrowInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*GetBorrowInterestRateResponse) ProtoMessage()    {}
func (*GetBorrowInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{29}
}
func (m *GetBorrowInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBorrowInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBorrowInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBorrowInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBorrowInterestRateResponse.Merge(m, src)
}
func (m *GetBorrowInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBorrowInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBorrowInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBorrowInterestRateResponse proto.InternalMessageInfo

func (m *GetBorrowInterestRateResponse) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

type GetCollateralDenomUserStatsQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *GetCollateralDenomUserStatsQuery) Reset()         { *m = GetCollateralDenomUserStatsQuery{} }
func (m *GetCollateralDenomUserStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetCollateralDenomUserStatsQuery) ProtoMessage()    {}
func (*GetCollateralDenomUserStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{30}
}
func (m *GetCollateralDenomUserStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralDenomUserStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralDenomUserStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralDenomUserStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralDenomUserStatsQuery.Merge(m, src)
}
func (m *GetCollateralDenomUserStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralDenomUserStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralDenomUserStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralDenomUserStatsQuery proto.InternalMessageInfo

func (m *GetCollateralDenomUserStatsQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetCollateralDenomUserStatsQuery) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type GetCollateralDenomUserStatsResponse struct {
	Available    string `protobuf:"bytes,1,opt,name=available,proto3" json:"available,omitempty"`
	AvailableUsd string `protobuf:"bytes,2,opt,name=available_usd,json=availableUsd,proto3" json:"available_usd,omitempty"`
	Provided     string `protobuf:"bytes,3,opt,name=provided,proto3" json:"provided,omitempty"`
	ProvidedUsd  string `protobuf:"bytes,4,opt,name=provided_usd,json=providedUsd,proto3" json:"provided_usd,omitempty"`
}

func (m *GetCollateralDenomUserStatsResponse) Reset()         { *m = GetCollateralDenomUserStatsResponse{} }
func (m *GetCollateralDenomUserStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCollateralDenomUserStatsResponse) ProtoMessage()    {}
func (*GetCollateralDenomUserStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{31}
}
func (m *GetCollateralDenomUserStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralDenomUserStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralDenomUserStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralDenomUserStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralDenomUserStatsResponse.Merge(m, src)
}
func (m *GetCollateralDenomUserStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralDenomUserStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralDenomUserStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralDenomUserStatsResponse proto.InternalMessageInfo

func (m *GetCollateralDenomUserStatsResponse) GetAvailable() string {
	if m != nil {
		return m.Available
	}
	return ""
}

func (m *GetCollateralDenomUserStatsResponse) GetAvailableUsd() string {
	if m != nil {
		return m.AvailableUsd
	}
	return ""
}

func (m *GetCollateralDenomUserStatsResponse) GetProvided() string {
	if m != nil {
		return m.Provided
	}
	return ""
}

func (m *GetCollateralDenomUserStatsResponse) GetProvidedUsd() string {
	if m != nil {
		return m.ProvidedUsd
	}
	return ""
}

type GetCreditLineUsageQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetCreditLineUsageQuery) Reset()         { *m = GetCreditLineUsageQuery{} }
func (m *GetCreditLineUsageQuery) String() string { return proto.CompactTextString(m) }
func (*GetCreditLineUsageQuery) ProtoMessage()    {}
func (*GetCreditLineUsageQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{32}
}
func (m *GetCreditLineUsageQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCreditLineUsageQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCreditLineUsageQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCreditLineUsageQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCreditLineUsageQuery.Merge(m, src)
}
func (m *GetCreditLineUsageQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetCreditLineUsageQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCreditLineUsageQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetCreditLineUsageQuery proto.InternalMessageInfo

func (m *GetCreditLineUsageQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetCreditLineUsageResponse struct {
	Usage string `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (m *GetCreditLineUsageResponse) Reset()         { *m = GetCreditLineUsageResponse{} }
func (m *GetCreditLineUsageResponse) String() string { return proto.CompactTextString(m) }
func (*GetCreditLineUsageResponse) ProtoMessage()    {}
func (*GetCreditLineUsageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{33}
}
func (m *GetCreditLineUsageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCreditLineUsageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCreditLineUsageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCreditLineUsageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCreditLineUsageResponse.Merge(m, src)
}
func (m *GetCreditLineUsageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCreditLineUsageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCreditLineUsageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCreditLineUsageResponse proto.InternalMessageInfo

func (m *GetCreditLineUsageResponse) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{34}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type GetTotalValueLockedQuery struct {
}

func (m *GetTotalValueLockedQuery) Reset()         { *m = GetTotalValueLockedQuery{} }
func (m *GetTotalValueLockedQuery) String() string { return proto.CompactTextString(m) }
func (*GetTotalValueLockedQuery) ProtoMessage()    {}
func (*GetTotalValueLockedQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{35}
}
func (m *GetTotalValueLockedQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalValueLockedQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalValueLockedQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalValueLockedQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalValueLockedQuery.Merge(m, src)
}
func (m *GetTotalValueLockedQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalValueLockedQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalValueLockedQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalValueLockedQuery proto.InternalMessageInfo

type GetNumLoansQuery struct {
}

func (m *GetNumLoansQuery) Reset()         { *m = GetNumLoansQuery{} }
func (m *GetNumLoansQuery) String() string { return proto.CompactTextString(m) }
func (*GetNumLoansQuery) ProtoMessage()    {}
func (*GetNumLoansQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{36}
}
func (m *GetNumLoansQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNumLoansQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNumLoansQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNumLoansQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumLoansQuery.Merge(m, src)
}
func (m *GetNumLoansQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetNumLoansQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumLoansQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumLoansQuery proto.InternalMessageInfo

type GetNumAddressLoansQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetNumAddressLoansQuery) Reset()         { *m = GetNumAddressLoansQuery{} }
func (m *GetNumAddressLoansQuery) String() string { return proto.CompactTextString(m) }
func (*GetNumAddressLoansQuery) ProtoMessage()    {}
func (*GetNumAddressLoansQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{37}
}
func (m *GetNumAddressLoansQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNumAddressLoansQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNumAddressLoansQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNumAddressLoansQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumAddressLoansQuery.Merge(m, src)
}
func (m *GetNumAddressLoansQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetNumAddressLoansQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumAddressLoansQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumAddressLoansQuery proto.InternalMessageInfo

func (m *GetNumAddressLoansQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetNumAddressLoansResponse struct {
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *GetNumAddressLoansResponse) Reset()         { *m = GetNumAddressLoansResponse{} }
func (m *GetNumAddressLoansResponse) String() string { return proto.CompactTextString(m) }
func (*GetNumAddressLoansResponse) ProtoMessage()    {}
func (*GetNumAddressLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{38}
}
func (m *GetNumAddressLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNumAddressLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNumAddressLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNumAddressLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumAddressLoansResponse.Merge(m, src)
}
func (m *GetNumAddressLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNumAddressLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumAddressLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumAddressLoansResponse proto.InternalMessageInfo

func (m *GetNumAddressLoansResponse) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GetValueLoansQuery struct {
}

func (m *GetValueLoansQuery) Reset()         { *m = GetValueLoansQuery{} }
func (m *GetValueLoansQuery) String() string { return proto.CompactTextString(m) }
func (*GetValueLoansQuery) ProtoMessage()    {}
func (*GetValueLoansQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{39}
}
func (m *GetValueLoansQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValueLoansQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValueLoansQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValueLoansQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValueLoansQuery.Merge(m, src)
}
func (m *GetValueLoansQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetValueLoansQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValueLoansQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetValueLoansQuery proto.InternalMessageInfo

type GetValueLoansResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetValueLoansResponse) Reset()         { *m = GetValueLoansResponse{} }
func (m *GetValueLoansResponse) String() string { return proto.CompactTextString(m) }
func (*GetValueLoansResponse) ProtoMessage()    {}
func (*GetValueLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{40}
}
func (m *GetValueLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetValueLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetValueLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetValueLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValueLoansResponse.Merge(m, src)
}
func (m *GetValueLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetValueLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValueLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetValueLoansResponse proto.InternalMessageInfo

func (m *GetValueLoansResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetUserLoansQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetUserLoansQuery) Reset()         { *m = GetUserLoansQuery{} }
func (m *GetUserLoansQuery) String() string { return proto.CompactTextString(m) }
func (*GetUserLoansQuery) ProtoMessage()    {}
func (*GetUserLoansQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{41}
}
func (m *GetUserLoansQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserLoansQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserLoansQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserLoansQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLoansQuery.Merge(m, src)
}
func (m *GetUserLoansQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetUserLoansQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLoansQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLoansQuery proto.InternalMessageInfo

func (m *GetUserLoansQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetDepositUserStatsQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetDepositUserStatsQuery) Reset()         { *m = GetDepositUserStatsQuery{} }
func (m *GetDepositUserStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetDepositUserStatsQuery) ProtoMessage()    {}
func (*GetDepositUserStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{42}
}
func (m *GetDepositUserStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepositUserStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepositUserStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepositUserStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepositUserStatsQuery.Merge(m, src)
}
func (m *GetDepositUserStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetDepositUserStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepositUserStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepositUserStatsQuery proto.InternalMessageInfo

func (m *GetDepositUserStatsQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetCollateralUserStatsQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetCollateralUserStatsQuery) Reset()         { *m = GetCollateralUserStatsQuery{} }
func (m *GetCollateralUserStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetCollateralUserStatsQuery) ProtoMessage()    {}
func (*GetCollateralUserStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{43}
}
func (m *GetCollateralUserStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralUserStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralUserStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralUserStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralUserStatsQuery.Merge(m, src)
}
func (m *GetCollateralUserStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralUserStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralUserStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralUserStatsQuery proto.InternalMessageInfo

func (m *GetCollateralUserStatsQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetUserStatsQuery struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetUserStatsQuery) Reset()         { *m = GetUserStatsQuery{} }
func (m *GetUserStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetUserStatsQuery) ProtoMessage()    {}
func (*GetUserStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{44}
}
func (m *GetUserStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserStatsQuery.Merge(m, src)
}
func (m *GetUserStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetUserStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserStatsQuery proto.InternalMessageInfo

func (m *GetUserStatsQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetDepositStatsQuery struct {
}

func (m *GetDepositStatsQuery) Reset()         { *m = GetDepositStatsQuery{} }
func (m *GetDepositStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetDepositStatsQuery) ProtoMessage()    {}
func (*GetDepositStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{45}
}
func (m *GetDepositStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepositStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepositStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepositStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepositStatsQuery.Merge(m, src)
}
func (m *GetDepositStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetDepositStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepositStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepositStatsQuery proto.InternalMessageInfo

type GetCollateralStatsQuery struct {
}

func (m *GetCollateralStatsQuery) Reset()         { *m = GetCollateralStatsQuery{} }
func (m *GetCollateralStatsQuery) String() string { return proto.CompactTextString(m) }
func (*GetCollateralStatsQuery) ProtoMessage()    {}
func (*GetCollateralStatsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{46}
}
func (m *GetCollateralStatsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralStatsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralStatsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralStatsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralStatsQuery.Merge(m, src)
}
func (m *GetCollateralStatsQuery) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralStatsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralStatsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralStatsQuery proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{47}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type CollateralDenomStats struct {
	Denom          string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount         string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd      string `protobuf:"bytes,3,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
	Ltv            string `protobuf:"bytes,4,opt,name=ltv,proto3" json:"ltv,omitempty"`
	PriceUsd       string `protobuf:"bytes,5,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"`
	Deposited      string `protobuf:"bytes,6,opt,name=deposited,proto3" json:"deposited,omitempty"`
	DepositCap     string `protobuf:"bytes,7,opt,name=deposit_cap,json=depositCap,proto3" json:"deposit_cap,omitempty"`
	DepositCapUsed string `protobuf:"bytes,8,opt,name=deposit_cap_used,json=depositCapUsed,proto3" json:"deposit_cap_used,omitempty"`
}

func (m *CollateralDenomStats) Reset()         { *m = CollateralDenomStats{} }
func (m *CollateralDenomStats) String() string { return proto.CompactTextString(m) }
func (*CollateralDenomStats) ProtoMessage()    {}
func (*CollateralDenomStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{48}
}
func (m *CollateralDenomStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralDenomStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralDenomStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralDenomStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralDenomStats.Merge(m, src)
}
func (m *CollateralDenomStats) XXX_Size() int {
	return m.Size()
}
func (m *CollateralDenomStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralDenomStats.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralDenomStats proto.InternalMessageInfo

func (m *CollateralDenomStats) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CollateralDenomStats) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *CollateralDenomStats) GetAmountUsd() string {
	if m != nil {
		return m.AmountUsd
	}
	return ""
}

func (m *CollateralDenomStats) GetLtv() string {
	if m != nil {
		return m.Ltv
	}
	return ""
}

func (m *CollateralDenomStats) GetPriceUsd() string {
	if m != nil {
		return m.PriceUsd
	}
	return ""
}

func (m *CollateralDenomStats) GetDeposited() string {
	if m != nil {
		return m.Deposited
	}
	return ""
}

func (m *CollateralDenomStats) GetDepositCap() string {
	if m != nil {
		return m.DepositCap
	}
	return ""
}

func (m *CollateralDenomStats) GetDepositCapUsed() string {
	if m != nil {
		return m.DepositCapUsed
	}
	return ""
}

type GetCollateralStatsResponse struct {
	Stats    []*CollateralDenomStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	TotalUsd string                  `protobuf:"bytes,2,opt,name=total_usd,json=totalUsd,proto3" json:"total_usd,omitempty"`
}

func (m *GetCollateralStatsResponse) Reset()         { *m = GetCollateralStatsResponse{} }
func (m *GetCollateralStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCollateralStatsResponse) ProtoMessage()    {}
func (*GetCollateralStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{49}
}
func (m *GetCollateralStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCollateralStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCollateralStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCollateralStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCollateralStatsResponse.Merge(m, src)
}
func (m *GetCollateralStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCollateralStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCollateralStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCollateralStatsResponse proto.InternalMessageInfo

func (m *GetCollateralStatsResponse) GetStats() []*CollateralDenomStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *GetCollateralStatsResponse) GetTotalUsd() string {
	if m != nil {
		return m.TotalUsd
	}
	return ""
}

type DepositDenomStats struct {
	BaseDenom       string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	CAssetDenom     string `protobuf:"bytes,2,opt,name=c_asset_denom,json=cAssetDenom,proto3" json:"c_asset_denom,omitempty"`
	Available       string `protobuf:"bytes,3,opt,name=available,proto3" json:"available,omitempty"`
	AvailableUsd    string `protobuf:"bytes,4,opt,name=available_usd,json=availableUsd,proto3" json:"available_usd,omitempty"`
	Borrowed        string `protobuf:"bytes,5,opt,name=borrowed,proto3" json:"borrowed,omitempty"`
	BorrowedUsd     string `protobuf:"bytes,6,opt,name=borrowed_usd,json=borrowedUsd,proto3" json:"borrowed_usd,omitempty"`
	Redeeming       string `protobuf:"bytes,7,opt,name=redeeming,proto3" json:"redeeming,omitempty"`
	RedeemingUsd    string `protobuf:"bytes,8,opt,name=redeeming_usd,json=redeemingUsd,proto3" json:"redeeming_usd,omitempty"`
	SupplyCAsset    string `protobuf:"bytes,9,opt,name=supply_c_asset,json=supplyCAsset,proto3" json:"supply_c_asset,omitempty"`
	SupplyCAssetUsd string `protobuf:"bytes,10,opt,name=supply_c_asset_usd,json=supplyCAssetUsd,proto3" json:"supply_c_asset_usd,omitempty"`
	InterestRate    string `protobuf:"bytes,11,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	UtilityRate     string `protobuf:"bytes,12,opt,name=utility_rate,json=utilityRate,proto3" json:"utility_rate,omitempty"`
	PriceBaseUsd    string `protobuf:"bytes,13,opt,name=price_base_usd,json=priceBaseUsd,proto3" json:"price_base_usd,omitempty"`
	PriceCAssetUsd  string `protobuf:"bytes,14,opt,name=price_c_asset_usd,json=priceCAssetUsd,proto3" json:"price_c_asset_usd,omitempty"`
}

func (m *DepositDenomStats) Reset()         { *m = DepositDenomStats{} }
func (m *DepositDenomStats) String() string { return proto.CompactTextString(m) }
func (*DepositDenomStats) ProtoMessage()    {}
func (*DepositDenomStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{50}
}
func (m *DepositDenomStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositDenomStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositDenomStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositDenomStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositDenomStats.Merge(m, src)
}
func (m *DepositDenomStats) XXX_Size() int {
	return m.Size()
}
func (m *DepositDenomStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositDenomStats.DiscardUnknown(m)
}

var xxx_messageInfo_DepositDenomStats proto.InternalMessageInfo

func (m *DepositDenomStats) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *DepositDenomStats) GetCAssetDenom() string {
	if m != nil {
		return m.CAssetDenom
	}
	return ""
}

func (m *DepositDenomStats) GetAvailable() string {
	if m != nil {
		return m.Available
	}
	return ""
}

func (m *DepositDenomStats) GetAvailableUsd() string {
	if m != nil {
		return m.AvailableUsd
	}
	return ""
}

func (m *DepositDenomStats) GetBorrowed() string {
	if m != nil {
		return m.Borrowed
	}
	return ""
}

func (m *DepositDenomStats) GetBorrowedUsd() string {
	if m != nil {
		return m.BorrowedUsd
	}
	return ""
}

func (m *DepositDenomStats) GetRedeeming() string {
	if m != nil {
		return m.Redeeming
	}
	return ""
}

func (m *DepositDenomStats) GetRedeemingUsd() string {
	if m != nil {
		return m.RedeemingUsd
	}
	return ""
}

func (m *DepositDenomStats) GetSupplyCAsset() string {
	if m != nil {
		return m.SupplyCAsset
	}
	return ""
}

func (m *DepositDenomStats) GetSupplyCAssetUsd() string {
	if m != nil {
		return m.SupplyCAssetUsd
	}
	return ""
}

func (m *DepositDenomStats) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

func (m *DepositDenomStats) GetUtilityRate() string {
	if m != nil {
		return m.UtilityRate
	}
	return ""
}

func (m *DepositDenomStats) GetPriceBaseUsd() string {
	if m != nil {
		return m.PriceBaseUsd
	}
	return ""
}

func (m *DepositDenomStats) GetPriceCAssetUsd() string {
	if m != nil {
		return m.PriceCAssetUsd
	}
	return ""
}

type GetDepositStatsResponse struct {
	Stats             []*DepositDenomStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	TotalDepositedUsd string               `protobuf:"bytes,2,opt,name=total_deposited_usd,json=totalDepositedUsd,proto3" json:"total_deposited_usd,omitempty"`
	TotalAvailableUsd string               `protobuf:"bytes,3,opt,name=total_available_usd,json=totalAvailableUsd,proto3" json:"total_available_usd,omitempty"`
	TotalBorrowedUsd  string               `protobuf:"bytes,4,opt,name=total_borrowed_usd,json=totalBorrowedUsd,proto3" json:"total_borrowed_usd,omitempty"`
	TotalRedeemingUsd string               `protobuf:"bytes,5,opt,name=total_redeeming_usd,json=totalRedeemingUsd,proto3" json:"total_redeeming_usd,omitempty"`
}

func (m *GetDepositStatsResponse) Reset()         { *m = GetDepositStatsResponse{} }
func (m *GetDepositStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDepositStatsResponse) ProtoMessage()    {}
func (*GetDepositStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{51}
}
func (m *GetDepositStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepositStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepositStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepositStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepositStatsResponse.Merge(m, src)
}
func (m *GetDepositStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDepositStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepositStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepositStatsResponse proto.InternalMessageInfo

func (m *GetDepositStatsResponse) GetStats() []*DepositDenomStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *GetDepositStatsResponse) GetTotalDepositedUsd() string {
	if m != nil {
		return m.TotalDepositedUsd
	}
	return ""
}

func (m *GetDepositStatsResponse) GetTotalAvailableUsd() string {
	if m != nil {
		return m.TotalAvailableUsd
	}
	return ""
}

func (m *GetDepositStatsResponse) GetTotalBorrowedUsd() string {
	if m != nil {
		return m.TotalBorrowedUsd
	}
	return ""
}

func (m *GetDepositStatsResponse) GetTotalRedeemingUsd() string {
	if m != nil {
		return m.TotalRedeemingUsd
	}
	return ""
}

type DepositUserStats struct {
	BaseDenom      string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	CAssetDenom    string `protobuf:"bytes,2,opt,name=c_asset_denom,json=cAssetDenom,proto3" json:"c_asset_denom,omitempty"`
	CAssetSupply   string `protobuf:"bytes,3,opt,name=c_asset_supply,json=cAssetSupply,proto3" json:"c_asset_supply,omitempty"`
	CAssetValue    string `protobuf:"bytes,4,opt,name=c_asset_value,json=cAssetValue,proto3" json:"c_asset_value,omitempty"`
	AmountCAsset   string `protobuf:"bytes,5,opt,name=amount_c_asset,json=amountCAsset,proto3" json:"amount_c_asset,omitempty"`
	BaseEquivalent string `protobuf:"bytes,6,opt,name=base_equivalent,json=baseEquivalent,proto3" json:"base_equivalent,omitempty"`
	ValueCAssetUsd string `protobuf:"bytes,7,opt,name=value_c_asset_usd,json=valueCAssetUsd,proto3" json:"value_c_asset_usd,omitempty"`
	PriceBaseUsd   string `protobuf:"bytes,8,opt,name=price_base_usd,json=priceBaseUsd,proto3" json:"price_base_usd,omitempty"`
	PriceCAssetUsd string `protobuf:"bytes,9,opt,name=price_c_asset_usd,json=priceCAssetUsd,proto3" json:"price_c_asset_usd,omitempty"`
	Redeeming      string `protobuf:"bytes,10,opt,name=redeeming,proto3" json:"redeeming,omitempty"`
	RedeemingUsd   string `protobuf:"bytes,11,opt,name=redeeming_usd,json=redeemingUsd,proto3" json:"redeeming_usd,omitempty"`
	InterestRate   string `protobuf:"bytes,12,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
}

func (m *DepositUserStats) Reset()         { *m = DepositUserStats{} }
func (m *DepositUserStats) String() string { return proto.CompactTextString(m) }
func (*DepositUserStats) ProtoMessage()    {}
func (*DepositUserStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{52}
}
func (m *DepositUserStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositUserStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositUserStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositUserStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositUserStats.Merge(m, src)
}
func (m *DepositUserStats) XXX_Size() int {
	return m.Size()
}
func (m *DepositUserStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositUserStats.DiscardUnknown(m)
}

var xxx_messageInfo_DepositUserStats proto.InternalMessageInfo

func (m *DepositUserStats) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *DepositUserStats) GetCAssetDenom() string {
	if m != nil {
		return m.CAssetDenom
	}
	return ""
}

func (m *DepositUserStats) GetCAssetSupply() string {
	if m != nil {
		return m.CAssetSupply
	}
	return ""
}

func (m *DepositUserStats) GetCAssetValue() string {
	if m != nil {
		return m.CAssetValue
	}
	return ""
}

func (m *DepositUserStats) GetAmountCAsset() string {
	if m != nil {
		return m.AmountCAsset
	}
	return ""
}

func (m *DepositUserStats) GetBaseEquivalent() string {
	if m != nil {
		return m.BaseEquivalent
	}
	return ""
}

func (m *DepositUserStats) GetValueCAssetUsd() string {
	if m != nil {
		return m.ValueCAssetUsd
	}
	return ""
}

func (m *DepositUserStats) GetPriceBaseUsd() string {
	if m != nil {
		return m.PriceBaseUsd
	}
	return ""
}

func (m *DepositUserStats) GetPriceCAssetUsd() string {
	if m != nil {
		return m.PriceCAssetUsd
	}
	return ""
}

func (m *DepositUserStats) GetRedeeming() string {
	if m != nil {
		return m.Redeeming
	}
	return ""
}

func (m *DepositUserStats) GetRedeemingUsd() string {
	if m != nil {
		return m.RedeemingUsd
	}
	return ""
}

func (m *DepositUserStats) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

type GetDepositUserStatsResponse struct {
	Stats             []*DepositUserStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	TotalDepositedUsd string              `protobuf:"bytes,2,opt,name=total_deposited_usd,json=totalDepositedUsd,proto3" json:"total_deposited_usd,omitempty"`
	TotalRedeemingUsd string              `protobuf:"bytes,3,opt,name=total_redeeming_usd,json=totalRedeemingUsd,proto3" json:"total_redeeming_usd,omitempty"`
}

func (m *GetDepositUserStatsResponse) Reset()         { *m = GetDepositUserStatsResponse{} }
func (m *GetDepositUserStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDepositUserStatsResponse) ProtoMessage()    {}
func (*GetDepositUserStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{53}
}
func (m *GetDepositUserStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDepositUserStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDepositUserStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDepositUserStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDepositUserStatsResponse.Merge(m, src)
}
func (m *GetDepositUserStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDepositUserStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDepositUserStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDepositUserStatsResponse proto.InternalMessageInfo

func (m *GetDepositUserStatsResponse) GetStats() []*DepositUserStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *GetDepositUserStatsResponse) GetTotalDepositedUsd() string {
	if m != nil {
		return m.TotalDepositedUsd
	}
	return ""
}

func (m *GetDepositUserStatsResponse) GetTotalRedeemingUsd() string {
	if m != nil {
		return m.TotalRedeemingUsd
	}
	return ""
}

type GetUserStatsResponse struct {
	TotalDeposited   string `protobuf:"bytes,1,opt,name=total_deposited,json=totalDeposited,proto3" json:"total_deposited,omitempty"`
	TotalCollateral  string `protobuf:"bytes,2,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral,omitempty"`
	TotalBorrowed    string `protobuf:"bytes,3,opt,name=total_borrowed,json=totalBorrowed,proto3" json:"total_borrowed,omitempty"`
	TotalWithdrawing string `protobuf:"bytes,4,opt,name=total_withdrawing,json=totalWithdrawing,proto3" json:"total_withdrawing,omitempty"`
	TotalBorrowable  string `protobuf:"bytes,5,opt,name=total_borrowable,json=totalBorrowable,proto3" json:"total_borrowable,omitempty"`
	UtilityRate      string `protobuf:"bytes,6,opt,name=utility_rate,json=utilityRate,proto3" json:"utility_rate,omitempty"`
	InterestRate     string `protobuf:"bytes,7,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
}

func (m *GetUserStatsResponse) Reset()         { *m = GetUserStatsResponse{} }
func (m *GetUserStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserStatsResponse) ProtoMessage()    {}
func (*GetUserStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{54}
}
func (m *GetUserStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserStatsResponse.Merge(m, src)
}
func (m *GetUserStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserStatsResponse proto.InternalMessageInfo

func (m *GetUserStatsResponse) GetTotalDeposited() string {
	if m != nil {
		return m.TotalDeposited
	}
	return ""
}

func (m *GetUserStatsResponse) GetTotalCollateral() string {
	if m != nil {
		return m.TotalCollateral
	}
	return ""
}

func (m *GetUserStatsResponse) GetTotalBorrowed() string {
	if m != nil {
		return m.TotalBorrowed
	}
	return ""
}

func (m *GetUserStatsResponse) GetTotalWithdrawing() string {
	if m != nil {
		return m.TotalWithdrawing
	}
	return ""
}

func (m *GetUserStatsResponse) GetTotalBorrowable() string {
	if m != nil {
		return m.TotalBorrowable
	}
	return ""
}

func (m *GetUserStatsResponse) GetUtilityRate() string {
	if m != nil {
		return m.UtilityRate
	}
	return ""
}

func (m *GetUserStatsResponse) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{55}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetTotalDepositsResponse struct {
	Sum string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *GetTotalDepositsResponse) Reset()         { *m = GetTotalDepositsResponse{} }
func (m *GetTotalDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalDepositsResponse) ProtoMessage()    {}
func (*GetTotalDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{56}
}
func (m *GetTotalDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalDepositsResponse.Merge(m, src)
}
func (m *GetTotalDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalDepositsResponse proto.InternalMessageInfo

func (m *GetTotalDepositsResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type GetNumLoansResponse struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GetNumLoansResponse) Reset()         { *m = GetNumLoansResponse{} }
func (m *GetNumLoansResponse) String() string { return proto.CompactTextString(m) }
func (*GetNumLoansResponse) ProtoMessage()    {}
func (*GetNumLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{57}
}
func (m *GetNumLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNumLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNumLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNumLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumLoansResponse.Merge(m, src)
}
func (m *GetNumLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNumLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumLoansResponse proto.InternalMessageInfo

func (m *GetNumLoansResponse) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GetTotalValueLockedResponse struct {
	Sum string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *GetTotalValueLockedResponse) Reset()         { *m = GetTotalValueLockedResponse{} }
func (m *GetTotalValueLockedResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalValueLockedResponse) ProtoMessage()    {}
func (*GetTotalValueLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{58}
}
func (m *GetTotalValueLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalValueLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalValueLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalValueLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalValueLockedResponse.Merge(m, src)
}
func (m *GetTotalValueLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalValueLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalValueLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalValueLockedResponse proto.InternalMessageInfo

func (m *GetTotalValueLockedResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

type UserLoanStat struct {
	Denom              string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	AmountBorrowed     string `protobuf:"bytes,2,opt,name=amount_borrowed,json=amountBorrowed,proto3" json:"amount_borrowed,omitempty"`
	AmountBorrowedUsd  string `protobuf:"bytes,3,opt,name=amount_borrowed_usd,json=amountBorrowedUsd,proto3" json:"amount_borrowed_usd,omitempty"`
	AmountAvailable    string `protobuf:"bytes,4,opt,name=amount_available,json=amountAvailable,proto3" json:"amount_available,omitempty"`
	AmountAvailableUsd string `protobuf:"bytes,5,opt,name=amount_available_usd,json=amountAvailableUsd,proto3" json:"amount_available_usd,omitempty"`
	InterestRate       string `protobuf:"bytes,6,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
}

func (m *UserLoanStat) Reset()         { *m = UserLoanStat{} }
func (m *UserLoanStat) String() string { return proto.CompactTextString(m) }
func (*UserLoanStat) ProtoMessage()    {}
func (*UserLoanStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{59}
}
func (m *UserLoanStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoanStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoanStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoanStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoanStat.Merge(m, src)
}
func (m *UserLoanStat) XXX_Size() int {
	return m.Size()
}
func (m *UserLoanStat) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoanStat.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoanStat proto.InternalMessageInfo

func (m *UserLoanStat) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UserLoanStat) GetAmountBorrowed() string {
	if m != nil {
		return m.AmountBorrowed
	}
	return ""
}

func (m *UserLoanStat) GetAmountBorrowedUsd() string {
	if m != nil {
		return m.AmountBorrowedUsd
	}
	return ""
}

func (m *UserLoanStat) GetAmountAvailable() string {
	if m != nil {
		return m.AmountAvailable
	}
	return ""
}

func (m *UserLoanStat) GetAmountAvailableUsd() string {
	if m != nil {
		return m.AmountAvailableUsd
	}
	return ""
}

func (m *UserLoanStat) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

type GetUserLoansResponse struct {
	UserLoans []*UserLoanStat `protobuf:"bytes,1,rep,name=user_loans,json=userLoans,proto3" json:"user_loans,omitempty"`
}

func (m *GetUserLoansResponse) Reset()         { *m = GetUserLoansResponse{} }
func (m *GetUserLoansResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserLoansResponse) ProtoMessage()    {}
func (*GetUserLoansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{60}
}
func (m *GetUserLoansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserLoansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserLoansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserLoansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLoansResponse.Merge(m, src)
}
func (m *GetUserLoansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserLoansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLoansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLoansResponse proto.InternalMessageInfo

func (m *GetUserLoansResponse) GetUserLoans() []*UserLoanStat {
	if m != nil {
		return m.UserLoans
	}
	return nil
}

type QueryFullBalanceRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryFullBalanceRequest) Reset()         { *m = QueryFullBalanceRequest{} }
func (m *QueryFullBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFullBalanceRequest) ProtoMessage()    {}
func (*QueryFullBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{61}
}
func (m *QueryFullBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullBalanceRequest.Merge(m, src)
}
func (m *QueryFullBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullBalanceRequest proto.InternalMessageInfo

func (m *QueryFullBalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type FullDenomBalance struct {
	Denom         string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Sum           string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	SumUsd        string `protobuf:"bytes,3,opt,name=sum_usd,json=sumUsd,proto3" json:"sum_usd,omitempty"`
	Wallet        string `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	WalletUsd     string `protobuf:"bytes,5,opt,name=wallet_usd,json=walletUsd,proto3" json:"wallet_usd,omitempty"`
	Liquidity     string `protobuf:"bytes,6,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	LiquidityUsd  string `protobuf:"bytes,7,opt,name=liquidity_usd,json=liquidityUsd,proto3" json:"liquidity_usd,omitempty"`
	Orders        string `protobuf:"bytes,8,opt,name=orders,proto3" json:"orders,omitempty"`
	OrdersUsd     string `protobuf:"bytes,9,opt,name=orders_usd,json=ordersUsd,proto3" json:"orders_usd,omitempty"`
	Collateral    string `protobuf:"bytes,10,opt,name=collateral,proto3" json:"collateral,omitempty"`
	CollateralUsd string `protobuf:"bytes,11,opt,name=collateral_usd,json=collateralUsd,proto3" json:"collateral_usd,omitempty"`
}

func (m *FullDenomBalance) Reset()         { *m = FullDenomBalance{} }
func (m *FullDenomBalance) String() string { return proto.CompactTextString(m) }
func (*FullDenomBalance) ProtoMessage()    {}
func (*FullDenomBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{62}
}
func (m *FullDenomBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullDenomBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullDenomBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullDenomBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullDenomBalance.Merge(m, src)
}
func (m *FullDenomBalance) XXX_Size() int {
	return m.Size()
}
func (m *FullDenomBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_FullDenomBalance.DiscardUnknown(m)
}

var xxx_messageInfo_FullDenomBalance proto.InternalMessageInfo

func (m *FullDenomBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *FullDenomBalance) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *FullDenomBalance) GetSumUsd() string {
	if m != nil {
		return m.SumUsd
	}
	return ""
}

func (m *FullDenomBalance) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *FullDenomBalance) GetWalletUsd() string {
	if m != nil {
		return m.WalletUsd
	}
	return ""
}

func (m *FullDenomBalance) GetLiquidity() string {
	if m != nil {
		return m.Liquidity
	}
	return ""
}

func (m *FullDenomBalance) GetLiquidityUsd() string {
	if m != nil {
		return m.LiquidityUsd
	}
	return ""
}

func (m *FullDenomBalance) GetOrders() string {
	if m != nil {
		return m.Orders
	}
	return ""
}

func (m *FullDenomBalance) GetOrdersUsd() string {
	if m != nil {
		return m.OrdersUsd
	}
	return ""
}

func (m *FullDenomBalance) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *FullDenomBalance) GetCollateralUsd() string {
	if m != nil {
		return m.CollateralUsd
	}
	return ""
}

type QueryFullBalanceResponse struct {
	Sum           string              `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
	SumWallet     string              `protobuf:"bytes,2,opt,name=sum_wallet,json=sumWallet,proto3" json:"sum_wallet,omitempty"`
	SumLiquidity  string              `protobuf:"bytes,3,opt,name=sum_liquidity,json=sumLiquidity,proto3" json:"sum_liquidity,omitempty"`
	SumOrders     string              `protobuf:"bytes,4,opt,name=sum_orders,json=sumOrders,proto3" json:"sum_orders,omitempty"`
	SumCollateral string              `protobuf:"bytes,5,opt,name=sum_collateral,json=sumCollateral,proto3" json:"sum_collateral,omitempty"`
	Denoms        []*FullDenomBalance `protobuf:"bytes,6,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryFullBalanceResponse) Reset()         { *m = QueryFullBalanceResponse{} }
func (m *QueryFullBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFullBalanceResponse) ProtoMessage()    {}
func (*QueryFullBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_331fa765c216711a, []int{63}
}
func (m *QueryFullBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFullBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFullBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFullBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFullBalanceResponse.Merge(m, src)
}
func (m *QueryFullBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFullBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFullBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFullBalanceResponse proto.InternalMessageInfo

func (m *QueryFullBalanceResponse) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *QueryFullBalanceResponse) GetSumWallet() string {
	if m != nil {
		return m.SumWallet
	}
	return ""
}

func (m *QueryFullBalanceResponse) GetSumLiquidity() string {
	if m != nil {
		return m.SumLiquidity
	}
	return ""
}

func (m *QueryFullBalanceResponse) GetSumOrders() string {
	if m != nil {
		return m.SumOrders
	}
	return ""
}

func (m *QueryFullBalanceResponse) GetSumCollateral() string {
	if m != nil {
		return m.SumCollateral
	}
	return ""
}

func (m *QueryFullBalanceResponse) GetDenoms() []*FullDenomBalance {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRedemptionsQuery)(nil), "kopi.mm.GetRedemptionsQuery")
	proto.RegisterType((*RedemptionRequest)(nil), "kopi.mm.RedemptionRequest")
	proto.RegisterType((*GetRedemptionsResponse)(nil), "kopi.mm.GetRedemptionsResponse")
	proto.RegisterType((*GetRedemptionStatsRequestQuery)(nil), "kopi.mm.GetRedemptionStatsRequestQuery")
	proto.RegisterType((*GetRedemptionStatsRequestResponse)(nil), "kopi.mm.GetRedemptionStatsRequestResponse")
	proto.RegisterType((*GetRedemptionDenomStatsRequestQuery)(nil), "kopi.mm.GetRedemptionDenomStatsRequestQuery")
	proto.RegisterType((*GetRedemptionDenomStatsRequestResponse)(nil), "kopi.mm.GetRedemptionDenomStatsRequestResponse")
	proto.RegisterType((*GetRedemptionRequestQuery)(nil), "kopi.mm.GetRedemptionRequestQuery")
	proto.RegisterType((*GetRedemptionRequestResponse)(nil), "kopi.mm.GetRedemptionRequestResponse")
	proto.RegisterType((*GetDepositUserDenomStatsQuery)(nil), "kopi.mm.GetDepositUserDenomStatsQuery")
	proto.RegisterType((*GetCollateralDenomStatsQuery)(nil), "kopi.mm.GetCollateralDenomStatsQuery")
	proto.RegisterType((*UserCollateral)(nil), "kopi.mm.UserCollateral")
	proto.RegisterType((*GetCollateralDenomStatsResponse)(nil), "kopi.mm.GetCollateralDenomStatsResponse")
	proto.RegisterType((*GetLoansByDenomQuery)(nil), "kopi.mm.GetLoansByDenomQuery")
	proto.RegisterType((*UserLoan)(nil), "kopi.mm.UserLoan")
	proto.RegisterType((*GetLoansResponse)(nil), "kopi.mm.GetLoansResponse")
	proto.RegisterType((*GetLoanStatsQuery)(nil), "kopi.mm.GetLoanStatsQuery")
	proto.RegisterType((*DenomLoanStat)(nil), "kopi.mm.DenomLoanStat")
	proto.RegisterType((*GetLoanStatsResponse)(nil), "kopi.mm.GetLoanStatsResponse")
	proto.RegisterType((*GetAvailableToBorrowRequest)(nil), "kopi.mm.GetAvailableToBorrowRequest")
	proto.RegisterType((*GetAvailableToBorrowResponse)(nil), "kopi.mm.GetAvailableToBorrowResponse")
	proto.RegisterType((*GetWithdrawableCollateralQuery)(nil), "kopi.mm.GetWithdrawableCollateralQuery")
	proto.RegisterType((*GetWithdrawableCollateralResponse)(nil), "kopi.mm.GetWithdrawableCollateralResponse")
	proto.RegisterType((*Vault)(nil), "kopi.mm.Vault")
	proto.RegisterType((*GetVaultValuesResponse)(nil), "kopi.mm.GetVaultValuesResponse")
	proto.RegisterType((*GetVaultValuesQuery)(nil), "kopi.mm.GetVaultValuesQuery")
	proto.RegisterType((*GetUserDenomLoanQuery)(nil), "kopi.mm.GetUserDenomLoanQuery")
	proto.RegisterType((*GetUserDenomLoanResponse)(nil), "kopi.mm.GetUserDenomLoanResponse")
	proto.RegisterType((*GetBorrowInterestRateQuery)(nil), "kopi.mm.GetBorrowInterestRateQuery")
	proto.RegisterType((*GetBorrowInterestRateResponse)(nil), "kopi.mm.GetBorrowInterestRateResponse")
	proto.RegisterType((*GetCollateralDenomUserStatsQuery)(nil), "kopi.mm.GetCollateralDenomUserStatsQuery")
	proto.RegisterType((*GetCollateralDenomUserStatsResponse)(nil), "kopi.mm.GetCollateralDenomUserStatsResponse")
	proto.RegisterType((*GetCreditLineUsageQuery)(nil), "kopi.mm.GetCreditLineUsageQuery")
	proto.RegisterType((*GetCreditLineUsageResponse)(nil), "kopi.mm.GetCreditLineUsageResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "kopi.mm.QueryParamsRequest")
	proto.RegisterType((*GetTotalValueLockedQuery)(nil), "kopi.mm.GetTotalValueLockedQuery")
	proto.RegisterType((*GetNumLoansQuery)(nil), "kopi.mm.GetNumLoansQuery")
	proto.RegisterType((*GetNumAddressLoansQuery)(nil), "kopi.mm.GetNumAddressLoansQuery")
	proto.RegisterType((*GetNumAddressLoansResponse)(nil), "kopi.mm.GetNumAddressLoansResponse")
	proto.RegisterType((*GetValueLoansQuery)(nil), "kopi.mm.GetValueLoansQuery")
	proto.RegisterType((*GetValueLoansResponse)(nil), "kopi.mm.GetValueLoansResponse")
	proto.RegisterType((*GetUserLoansQuery)(nil), "kopi.mm.GetUserLoansQuery")
	proto.RegisterType((*GetDepositUserStatsQuery)(nil), "kopi.mm.GetDepositUserStatsQuery")
	proto.RegisterType((*GetCollateralUserStatsQuery)(nil), "kopi.mm.GetCollateralUserStatsQuery")
	proto.RegisterType((*GetUserStatsQuery)(nil), "kopi.mm.GetUserStatsQuery")
	proto.RegisterType((*GetDepositStatsQuery)(nil), "kopi.mm.GetDepositStatsQuery")
	proto.RegisterType((*GetCollateralStatsQuery)(nil), "kopi.mm.GetCollateralStatsQuery")
	proto.RegisterType((*QueryParamsResponse)(nil), "kopi.mm.QueryParamsResponse")
	proto.RegisterType((*CollateralDenomStats)(nil), "kopi.mm.CollateralDenomStats")
	proto.RegisterType((*GetCollateralStatsResponse)(nil), "kopi.mm.GetCollateralStatsResponse")
	proto.RegisterType((*DepositDenomStats)(nil), "kopi.mm.DepositDenomStats")
	proto.RegisterType((*GetDepositStatsResponse)(nil), "kopi.mm.GetDepositStatsResponse")
	proto.RegisterType((*DepositUserStats)(nil), "kopi.mm.DepositUserStats")
	proto.RegisterType((*GetDepositUserStatsResponse)(nil), "kopi.mm.GetDepositUserStatsResponse")
	proto.RegisterType((*GetUserStatsResponse)(nil), "kopi.mm.GetUserStatsResponse")
	proto.RegisterType((*Address)(nil), "kopi.mm.Address")
	proto.RegisterType((*GetTotalDepositsResponse)(nil), "kopi.mm.GetTotalDepositsResponse")
	proto.RegisterType((*GetNumLoansResponse)(nil), "kopi.mm.GetNumLoansResponse")
	proto.RegisterType((*GetTotalValueLockedResponse)(nil), "kopi.mm.GetTotalValueLockedResponse")
	proto.RegisterType((*UserLoanStat)(nil), "kopi.mm.UserLoanStat")
	proto.RegisterType((*GetUserLoansResponse)(nil), "kopi.mm.GetUserLoansResponse")
	proto.RegisterType((*QueryFullBalanceRequest)(nil), "kopi.mm.QueryFullBalanceRequest")
	proto.RegisterType((*FullDenomBalance)(nil), "kopi.mm.FullDenomBalance")
	proto.RegisterType((*QueryFullBalanceResponse)(nil), "kopi.mm.QueryFullBalanceResponse")
}

func init() { proto.RegisterFile("kopi/mm/query.proto", fileDescriptor_331fa765c216711a) }

var fileDescriptor_331fa765c216711a = []byte{
	// 2919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xf7, 0x8a, 0x16, 0x25, 0x3e, 0x52, 0x94, 0x34, 0xa2, 0x65, 0x7a, 0x2d, 0xd1, 0xf2, 0x5a,
	0xb2, 0xec, 0x58, 0x12, 0xe3, 0x1f, 0x49, 0x0e, 0xc1, 0x17, 0xdf, 0x58, 0x76, 0x23, 0x14, 0x55,
	0xf3, 0x83, 0x89, 0x62, 0x20, 0x28, 0x40, 0xac, 0xc4, 0xa9, 0xcc, 0x64, 0x97, 0x4b, 0x73, 0x77,
	0x65, 0x0b, 0x45, 0x0e, 0x2d, 0x0a, 0xa4, 0x69, 0x81, 0x22, 0x6d, 0x7a, 0x28, 0x7a, 0xe8, 0xb5,
	0x97, 0xa2, 0x40, 0x0f, 0xbd, 0xf5, 0x0f, 0x08, 0xd0, 0x4b, 0xd0, 0x5e, 0x7a, 0x2a, 0x8a, 0xa4,
	0x97, 0xfe, 0x0d, 0x3d, 0xb4, 0x98, 0x37, 0xb3, 0xb3, 0x33, 0xbb, 0xb3, 0x14, 0x93, 0xb4, 0x17,
	0x82, 0xfb, 0xe6, 0xcd, 0x7b, 0x9f, 0x79, 0xf3, 0xde, 0x9b, 0x37, 0x6f, 0x17, 0x96, 0xde, 0x0f,
	0x86, 0xfd, 0xb6, 0xef, 0xb7, 0x9f, 0xc4, 0x74, 0x74, 0xba, 0x33, 0x1c, 0x05, 0x51, 0x40, 0x66,
	0x18, 0x71, 0xc7, 0xf7, 0xed, 0x45, 0xd7, 0xef, 0x0f, 0x82, 0x36, 0xfe, 0xf2, 0x31, 0xbb, 0x71,
	0x1c, 0x1c, 0x07, 0xf8, 0xb7, 0xcd, 0xfe, 0x09, 0xea, 0xca, 0x71, 0x10, 0x1c, 0x7b, 0xb4, 0xed,
	0x0e, 0xfb, 0x6d, 0x77, 0x30, 0x08, 0x22, 0x37, 0xea, 0x07, 0x83, 0x50, 0x8c, 0x3e, 0x77, 0x14,
	0x84, 0x7e, 0x10, 0xb6, 0x0f, 0xdd, 0x90, 0x72, 0x45, 0xed, 0x93, 0xdb, 0x87, 0x34, 0x72, 0x6f,
	0xb7, 0x87, 0xee, 0x71, 0x7f, 0x80, 0xcc, 0x89, 0xfc, 0x04, 0xd0, 0xd0, 0x1d, 0xb9, 0xbe, 0x90,
	0xe0, 0xdc, 0x82, 0xa5, 0x3d, 0x1a, 0x75, 0x68, 0x8f, 0xfa, 0x43, 0x94, 0xfc, 0x26, 0x93, 0x42,
	0x1a, 0x30, 0xdd, 0xa3, 0x83, 0xc0, 0x6f, 0x5a, 0x6b, 0xd6, 0x8d, 0x4a, 0x87, 0x3f, 0x38, 0x8f,
	0x60, 0x31, 0xe5, 0xec, 0xd0, 0x27, 0x31, 0x0d, 0x23, 0xd2, 0x84, 0x19, 0xb7, 0xd7, 0x1b, 0xd1,
	0x30, 0x14, 0xcc, 0xc9, 0x23, 0x59, 0x86, 0xb2, 0xeb, 0x07, 0xf1, 0x20, 0x6a, 0x4e, 0xe1, 0x80,
	0x78, 0x22, 0x0b, 0x50, 0xfa, 0x2e, 0xa5, 0xcd, 0x12, 0x12, 0xd9, 0x5f, 0xe7, 0x0d, 0x58, 0xd6,
	0x51, 0x74, 0x68, 0x38, 0x0c, 0x06, 0x21, 0x25, 0x2f, 0xc2, 0xec, 0x88, 0x2b, 0x62, 0xe2, 0x4b,
	0x37, 0xaa, 0x77, 0xec, 0x1d, 0x61, 0xc4, 0x9d, 0x1c, 0x96, 0x8e, 0xe4, 0x75, 0xd6, 0xa0, 0xa5,
	0x49, 0x7c, 0x2b, 0x72, 0xa3, 0x50, 0xb0, 0xe1, 0x12, 0x9d, 0x21, 0x5c, 0x2d, 0xe4, 0x90, 0xea,
	0xaf, 0x42, 0x6d, 0x10, 0xfb, 0x5d, 0x05, 0x82, 0x75, 0xa3, 0xd4, 0xa9, 0x0e, 0x62, 0x5f, 0x70,
	0x86, 0xe4, 0x06, 0x2c, 0x3c, 0xed, 0x47, 0x8f, 0x7b, 0x23, 0xf7, 0x69, 0x37, 0x8c, 0xfd, 0x6e,
	0x1c, 0xf6, 0xc4, 0x7a, 0xeb, 0x09, 0xfd, 0xad, 0xd8, 0x3f, 0x08, 0x7b, 0xce, 0xcb, 0x70, 0x4d,
	0xd3, 0xf8, 0x90, 0x19, 0x35, 0x07, 0xac, 0xc0, 0xf6, 0x1f, 0x5a, 0x70, 0x7d, 0xfc, 0x6c, 0x09,
	0xfa, 0x22, 0xcc, 0xf8, 0xee, 0xb3, 0x2e, 0xb3, 0x31, 0x17, 0x51, 0xf6, 0xdd, 0x67, 0xaf, 0x52,
	0x5c, 0x8d, 0x0a, 0x55, 0xc0, 0xac, 0x2a, 0x30, 0x73, 0x0b, 0x2e, 0xe5, 0x16, 0xec, 0x7c, 0x0b,
	0x2e, 0x69, 0x40, 0x34, 0xf0, 0xc5, 0xde, 0x20, 0x97, 0x35, 0xa5, 0x2e, 0xeb, 0x1d, 0x58, 0x31,
	0x09, 0x93, 0x6b, 0x11, 0xbe, 0x62, 0x49, 0x5f, 0x21, 0xeb, 0x50, 0x3f, 0xea, 0xba, 0x61, 0x48,
	0xa3, 0xae, 0xe6, 0x5d, 0xb5, 0xa3, 0xfb, 0x8c, 0x78, 0x1f, 0x69, 0xce, 0xeb, 0xb0, 0xba, 0x47,
	0xa3, 0x87, 0x74, 0x18, 0x84, 0xfd, 0xe8, 0x20, 0xa4, 0xa3, 0xd4, 0x5c, 0x63, 0xac, 0xac, 0xc2,
	0x9f, 0xd2, 0xe0, 0x3b, 0xf7, 0x10, 0xe8, 0x83, 0xc0, 0xf3, 0xdc, 0x88, 0x8e, 0x5c, 0x6f, 0x22,
	0x79, 0xce, 0x2e, 0xd4, 0x99, 0xf2, 0x74, 0xda, 0x97, 0x0f, 0x17, 0xe7, 0xa7, 0x16, 0x5c, 0x29,
	0x50, 0x2d, 0xcd, 0xf4, 0x0a, 0xcc, 0xc7, 0x21, 0x1d, 0x75, 0x8f, 0x24, 0x93, 0x88, 0x96, 0x8b,
	0x32, 0x5a, 0x74, 0x1c, 0x9d, 0x7a, 0xac, 0xe3, 0x5a, 0x80, 0x52, 0xea, 0x12, 0xec, 0x2f, 0x73,
	0xa3, 0xc4, 0x9f, 0x79, 0xa8, 0x96, 0x43, 0xee, 0xc7, 0x5b, 0xd0, 0xd8, 0xa3, 0xd1, 0x7e, 0xe0,
	0x0e, 0xc2, 0xdd, 0x53, 0x04, 0x33, 0xce, 0x04, 0xbf, 0xb6, 0x60, 0x96, 0xe9, 0x66, 0xfc, 0x05,
	0x56, 0xdf, 0x84, 0x79, 0xbe, 0xd6, 0xee, 0x61, 0x30, 0x1a, 0x05, 0x4f, 0xa9, 0x8c, 0x20, 0x4e,
	0xde, 0x15, 0x54, 0xb2, 0x03, 0x4b, 0x19, 0x46, 0x05, 0xde, 0xa2, 0xce, 0x7c, 0x10, 0xf6, 0xc8,
	0x35, 0x98, 0xeb, 0x0f, 0x22, 0x3a, 0xa2, 0x61, 0xd4, 0x1d, 0xb9, 0x11, 0x6d, 0x96, 0xb9, 0xab,
	0x24, 0xc4, 0x8e, 0x1b, 0x51, 0xe7, 0x65, 0x58, 0x48, 0x96, 0x23, 0xed, 0xb9, 0x09, 0xd3, 0x1e,
	0x23, 0x08, 0x2b, 0x2e, 0x6a, 0x56, 0x64, 0xac, 0x1d, 0x3e, 0xee, 0x2c, 0xc1, 0xa2, 0x98, 0x9c,
	0xfa, 0x82, 0xf3, 0xb3, 0x29, 0x98, 0x43, 0xbb, 0x24, 0xf4, 0x82, 0x75, 0x5f, 0x85, 0x5a, 0x1c,
	0xf5, 0xbd, 0x7e, 0x74, 0xca, 0xd1, 0x89, 0x78, 0x14, 0x34, 0x06, 0x2e, 0xbf, 0x82, 0x52, 0x7e,
	0x05, 0x68, 0x96, 0x13, 0xb7, 0xef, 0xb9, 0x87, 0x1e, 0xed, 0x46, 0x81, 0x30, 0x4e, 0xf3, 0xbc,
	0x30, 0x4b, 0x32, 0xf4, 0x76, 0xc0, 0x6d, 0x43, 0x5e, 0x80, 0x8b, 0x06, 0x7e, 0x34, 0xe5, 0x34,
	0xce, 0x69, 0xe4, 0xe6, 0x30, 0x6b, 0x5e, 0x82, 0x59, 0xb6, 0x68, 0x4c, 0x1d, 0xdc, 0x90, 0x33,
	0xec, 0x99, 0xa5, 0x8d, 0x35, 0xa8, 0x25, 0x43, 0x28, 0x66, 0x06, 0x87, 0x41, 0x0c, 0x33, 0xa7,
	0xf9, 0xa3, 0x25, 0xbd, 0x46, 0x77, 0xdd, 0x17, 0x00, 0xf8, 0x54, 0x46, 0x15, 0xf6, 0x5e, 0x96,
	0xf6, 0xd6, 0xcc, 0xd8, 0xa9, 0x78, 0xc9, 0x74, 0xf2, 0x0a, 0xac, 0x46, 0x41, 0xe4, 0x7a, 0xdd,
	0xa2, 0x95, 0x70, 0x63, 0x5e, 0x42, 0xa6, 0xfb, 0xa6, 0xe5, 0xdc, 0x02, 0xc2, 0x25, 0x68, 0xc8,
	0xb9, 0x7d, 0xe7, 0x71, 0x64, 0x3f, 0x85, 0xff, 0x6d, 0xb8, 0xbc, 0x47, 0xa3, 0x9c, 0x9c, 0xb3,
	0x0f, 0x41, 0x73, 0xda, 0x3b, 0xc0, 0x6c, 0x62, 0x10, 0x27, 0x8c, 0x92, 0xe6, 0x02, 0x4b, 0x3b,
	0x3a, 0x57, 0x01, 0x44, 0x00, 0xa4, 0x4b, 0xac, 0x70, 0x0a, 0x43, 0xf9, 0x06, 0x9e, 0x7a, 0x8f,
	0x44, 0x3e, 0x67, 0x92, 0xd3, 0x08, 0xff, 0x6a, 0xf9, 0xf9, 0x5d, 0x3c, 0x25, 0xcd, 0x12, 0xbf,
	0x2e, 0xda, 0xf7, 0x60, 0xfa, 0x1d, 0x37, 0xf6, 0xa2, 0xe2, 0x5c, 0x7c, 0xe8, 0x7a, 0xee, 0xe0,
	0x28, 0x09, 0x8c, 0xe4, 0x51, 0x73, 0xc4, 0x92, 0xee, 0x88, 0xcb, 0x50, 0x0e, 0xe3, 0xe1, 0xd0,
	0x3b, 0x15, 0xde, 0x2f, 0x9e, 0x9c, 0x57, 0xb0, 0xc2, 0x40, 0x75, 0xef, 0xb8, 0x5e, 0x4c, 0x53,
	0xff, 0xbb, 0x0e, 0xe5, 0x13, 0x46, 0x4e, 0x7c, 0xaf, 0x2e, 0x7d, 0x0f, 0xb9, 0x3b, 0x62, 0xd4,
	0xb9, 0x80, 0x95, 0x92, 0x22, 0x81, 0xc7, 0xfa, 0x1e, 0x5c, 0xd8, 0xa3, 0xe9, 0x09, 0xc3, 0x5c,
	0xe6, 0xab, 0x59, 0xfa, 0x4d, 0x68, 0x66, 0x05, 0x7d, 0x5d, 0x03, 0xdf, 0x01, 0x7b, 0x8f, 0x8a,
	0x84, 0xf8, 0x4d, 0x25, 0x61, 0x8c, 0x4b, 0xd7, 0x0f, 0xf1, 0xe0, 0xcc, 0xcf, 0x91, 0x58, 0x72,
	0x19, 0xc9, 0x32, 0xe4, 0xd4, 0x0e, 0xac, 0xe5, 0x8f, 0x2c, 0xb6, 0x36, 0xe5, 0xc4, 0xfc, 0xb2,
	0x06, 0xfa, 0x8d, 0x85, 0xf5, 0x53, 0x91, 0x50, 0x09, 0x70, 0x05, 0x2a, 0x32, 0x27, 0x08, 0xc9,
	0x29, 0x81, 0xc1, 0x4f, 0x33, 0x46, 0x6a, 0xb5, 0x9a, 0x24, 0xb2, 0xd4, 0x60, 0xc3, 0xec, 0x70,
	0x14, 0x9c, 0xf4, 0x7b, 0x34, 0x49, 0x08, 0xf2, 0x99, 0x25, 0xed, 0xe4, 0x3f, 0xce, 0xe7, 0x7e,
	0x56, 0x4d, 0x68, 0xcc, 0xee, 0x77, 0xe1, 0x22, 0x03, 0x3a, 0xa2, 0xbd, 0x7e, 0xb4, 0xdf, 0x1f,
	0xd0, 0x83, 0xd0, 0x3d, 0xa6, 0x67, 0x2c, 0x5a, 0x6c, 0x56, 0x66, 0x92, 0x5c, 0x54, 0x03, 0xa6,
	0x63, 0x46, 0x48, 0x36, 0x0b, 0x1f, 0x9c, 0x06, 0x10, 0x14, 0xfb, 0x06, 0x96, 0xf4, 0x22, 0x19,
	0x39, 0x36, 0x7a, 0xd2, 0xdb, 0x2c, 0x83, 0xa1, 0xa7, 0xee, 0x07, 0x47, 0xef, 0xd3, 0x1e, 0x77,
	0x57, 0x82, 0x87, 0xdd, 0x6b, 0x31, 0xfa, 0x97, 0x70, 0x61, 0x0e, 0xf7, 0xb5, 0xd8, 0xbf, 0xcf,
	0xa1, 0xa4, 0x43, 0x63, 0xe0, 0xde, 0x43, 0xb8, 0x99, 0x49, 0x06, 0x87, 0x9d, 0xc2, 0x02, 0x32,
	0xa9, 0x65, 0x1a, 0x40, 0x30, 0x88, 0x10, 0x95, 0x04, 0xb0, 0x8d, 0x31, 0x94, 0x52, 0xd5, 0x55,
	0x9f, 0x30, 0x6a, 0xb2, 0x6a, 0x7c, 0x70, 0xb6, 0xf1, 0xcc, 0x4d, 0x4e, 0xe2, 0x09, 0x90, 0x36,
	0xf5, 0x52, 0x70, 0x12, 0x1f, 0x74, 0x5e, 0xc2, 0x84, 0x9f, 0x3a, 0xdb, 0xc4, 0x13, 0x53, 0x74,
	0x13, 0xb1, 0x2f, 0xe3, 0xb1, 0x28, 0xd0, 0x29, 0x35, 0xc4, 0x25, 0xee, 0x43, 0x52, 0xbf, 0x32,
	0xf4, 0x10, 0x96, 0xb4, 0x5d, 0x17, 0xc6, 0xda, 0x86, 0x32, 0xbf, 0xda, 0xa1, 0x8a, 0xea, 0x9d,
	0x79, 0x99, 0xc8, 0x38, 0xe3, 0xee, 0xf9, 0x4f, 0xff, 0x76, 0xe5, 0x5c, 0x47, 0x30, 0x39, 0xff,
	0xb2, 0xa0, 0x61, 0xaa, 0x29, 0x0b, 0xb2, 0x71, 0xd1, 0x65, 0x4e, 0x4f, 0x41, 0xa5, 0x4c, 0x0a,
	0x62, 0x65, 0xa5, 0x17, 0x9d, 0x88, 0x20, 0x61, 0x7f, 0xc9, 0x65, 0xa8, 0x0c, 0x47, 0xfd, 0x23,
	0xaa, 0x94, 0x1b, 0xb3, 0x48, 0x60, 0xec, 0x2b, 0x50, 0xe9, 0x71, 0x53, 0xd0, 0x9e, 0xa8, 0x31,
	0x52, 0x02, 0xb9, 0x02, 0x55, 0xf1, 0xd0, 0x3d, 0x72, 0x87, 0x49, 0x91, 0x21, 0x48, 0x0f, 0xdc,
	0x21, 0xbb, 0x8b, 0x29, 0x0c, 0xdd, 0x38, 0xa4, 0xbd, 0xe6, 0x2c, 0xaf, 0x24, 0x53, 0xae, 0x83,
	0x90, 0xf6, 0x9c, 0x01, 0x8f, 0x36, 0xdd, 0xbc, 0xd2, 0x94, 0x77, 0x61, 0x5a, 0x2d, 0x47, 0x56,
	0xa5, 0x25, 0x8d, 0x45, 0x38, 0xe7, 0x65, 0x0b, 0xe3, 0xf5, 0x44, 0x9a, 0x55, 0x66, 0x91, 0xc0,
	0x52, 0xc2, 0x87, 0xe7, 0x61, 0x51, 0x6c, 0xb2, 0x62, 0xea, 0x55, 0x00, 0x76, 0x75, 0xef, 0xaa,
	0xf6, 0xae, 0x30, 0x0a, 0xf2, 0x10, 0x07, 0xe6, 0x92, 0xab, 0x8e, 0x9a, 0x0f, 0xab, 0xfc, 0xa6,
	0xc3, 0x79, 0xb4, 0x6c, 0x57, 0x3a, 0x33, 0xdb, 0x9d, 0x37, 0x67, 0x3b, 0x59, 0x77, 0x8b, 0x0d,
	0x49, 0x9e, 0x59, 0xb6, 0xd3, 0x4a, 0x6d, 0xbe, 0x27, 0xd5, 0x43, 0xa5, 0xc8, 0x5e, 0x81, 0xca,
	0x88, 0xf6, 0x28, 0xf5, 0xfb, 0x83, 0x63, 0xb1, 0x27, 0x29, 0x81, 0x21, 0x90, 0x0f, 0x28, 0x81,
	0xef, 0x47, 0x4d, 0x12, 0x99, 0x88, 0x75, 0xa8, 0xf3, 0x73, 0xba, 0x2b, 0xd6, 0xdb, 0xac, 0x70,
	0x2e, 0x4e, 0x7d, 0x80, 0xeb, 0x65, 0x05, 0x9b, 0xce, 0x85, 0xf2, 0x80, 0x17, 0x6c, 0x2a, 0xa7,
	0xb1, 0xf4, 0xaf, 0x1a, 0x0a, 0xe7, 0x6c, 0x01, 0x5e, 0xcb, 0x17, 0xe0, 0xeb, 0x50, 0xe7, 0xee,
	0x8a, 0x1b, 0xc5, 0x14, 0xce, 0x71, 0x41, 0x48, 0xdd, 0x75, 0x43, 0x34, 0xe1, 0x4d, 0x58, 0xe4,
	0x5c, 0x2a, 0xb2, 0x3a, 0xf7, 0x3c, 0x1c, 0x90, 0xc0, 0x9c, 0x8f, 0xa6, 0x30, 0xb2, 0xd5, 0x88,
	0x97, 0x7e, 0xf7, 0xbc, 0xee, 0x77, 0xb6, 0x52, 0x06, 0x67, 0x5c, 0x27, 0x71, 0xba, 0x1d, 0x58,
	0xe2, 0x4e, 0x27, 0xa3, 0x44, 0x71, 0xbf, 0x45, 0x1c, 0x7a, 0x98, 0x8c, 0x30, 0xa0, 0x92, 0x5f,
	0x77, 0x8b, 0x92, 0xc2, 0x7f, 0x5f, 0xf5, 0x8d, 0xad, 0xa4, 0x48, 0xd6, 0xbc, 0x80, 0x7b, 0xd1,
	0x02, 0x8e, 0xa8, 0xf7, 0x2d, 0x29, 0x5d, 0xdf, 0xf2, 0x69, 0x45, 0x7a, 0x47, 0xd9, 0x77, 0xe7,
	0xcf, 0x25, 0x58, 0xc8, 0x26, 0xe6, 0xff, 0x46, 0x50, 0x28, 0x3d, 0x02, 0x51, 0x0d, 0x96, 0xd4,
	0x1e, 0xc1, 0x5b, 0x48, 0x53, 0x25, 0xf1, 0x53, 0xe6, 0xbc, 0x2a, 0x09, 0x8f, 0x23, 0x26, 0x49,
	0xa4, 0xb7, 0xc4, 0x33, 0xa7, 0x45, 0x04, 0x21, 0x55, 0x78, 0xe6, 0x26, 0xcc, 0x23, 0x64, 0xfa,
	0x24, 0xee, 0x9f, 0xb8, 0x1e, 0x1d, 0x44, 0x22, 0x50, 0xea, 0x8c, 0xfc, 0x0d, 0x49, 0x65, 0x7e,
	0x82, 0xaa, 0x34, 0x3f, 0xe1, 0x31, 0x53, 0xc7, 0x81, 0xd4, 0x81, 0xf3, 0x8e, 0x37, 0x3b, 0xa9,
	0xe3, 0x55, 0x4c, 0x8e, 0xa7, 0xc7, 0x29, 0x9c, 0x19, 0xa7, 0x55, 0x43, 0x9c, 0xe6, 0x82, 0xaa,
	0x66, 0xa8, 0xfd, 0x7e, 0x67, 0xe1, 0xd1, 0x99, 0xdd, 0x57, 0xe9, 0xe4, 0x6d, 0xdd, 0xc9, 0x2f,
	0x65, 0x9d, 0x3c, 0x9d, 0xf1, 0x75, 0x7d, 0x5c, 0x5f, 0x50, 0xa9, 0xc8, 0x0b, 0x7f, 0x3f, 0x85,
	0x67, 0x70, 0x1e, 0xe9, 0x26, 0xcc, 0x67, 0x14, 0x0b, 0x77, 0xac, 0xeb, 0x4a, 0xc9, 0x4d, 0xe0,
	0xb1, 0xa0, 0xf6, 0x5f, 0xa6, 0x94, 0x8b, 0xa4, 0xd2, 0x67, 0xd9, 0x80, 0xba, 0x1e, 0x50, 0x02,
	0xd7, 0x9c, 0x16, 0x4c, 0xe4, 0x16, 0x70, 0xa0, 0xdd, 0xa4, 0x39, 0xc7, 0x36, 0x4d, 0x0d, 0xbb,
	0x47, 0x29, 0x3d, 0x55, 0xcf, 0x65, 0xe2, 0x51, 0x30, 0xad, 0xa8, 0xdf, 0x95, 0xe4, 0x5c, 0xc6,
	0x2b, 0x4f, 0xd0, 0x72, 0x98, 0x31, 0x6c, 0xf2, 0x35, 0x98, 0x11, 0x85, 0xdf, 0x98, 0xda, 0x66,
	0x2b, 0x2d, 0x44, 0x85, 0xad, 0x42, 0xb5, 0xb1, 0xc7, 0xae, 0x6f, 0x96, 0xec, 0x37, 0x39, 0x9b,
	0x78, 0xc1, 0x4a, 0x4a, 0x53, 0x95, 0x71, 0x20, 0x18, 0x4b, 0x1d, 0xf6, 0xd7, 0x69, 0xa3, 0x7f,
	0x65, 0xeb, 0xdb, 0x31, 0x92, 0xff, 0x6d, 0x41, 0x2d, 0x29, 0x17, 0xc7, 0xb4, 0x63, 0xfe, 0x67,
	0x6d, 0xa8, 0x9b, 0xb0, 0x20, 0xf8, 0xd3, 0xa3, 0x9a, 0xef, 0xa5, 0x50, 0x28, 0x53, 0x2e, 0x79,
	0x1e, 0x1a, 0x59, 0x56, 0x25, 0x85, 0x92, 0x0c, 0xfb, 0xc4, 0x3d, 0xae, 0x7d, 0xe9, 0xe1, 0xba,
	0x71, 0xef, 0x01, 0x60, 0xdf, 0x50, 0x6d, 0x76, 0x5d, 0xc8, 0x35, 0xbb, 0x78, 0xef, 0x25, 0x4e,
	0x66, 0xb3, 0x0b, 0x03, 0x16, 0xa0, 0xaf, 0xc6, 0x9e, 0xb7, 0xcb, 0xef, 0xe4, 0x67, 0x36, 0x42,
	0x9c, 0x3f, 0x4d, 0xc1, 0x02, 0x9b, 0x80, 0x19, 0x5a, 0xcc, 0x2a, 0xd8, 0x88, 0xc9, 0x7b, 0x91,
	0xac, 0x2c, 0x7d, 0xea, 0x7a, 0x1e, 0x8d, 0x92, 0xfb, 0x3e, 0x7f, 0x62, 0x87, 0x08, 0xff, 0xa7,
	0x58, 0xaf, 0xc2, 0x29, 0x22, 0x17, 0x7a, 0xfd, 0x27, 0x71, 0xbf, 0xd7, 0x8f, 0x4e, 0x93, 0x3a,
	0x53, 0x12, 0x98, 0x49, 0xe5, 0x83, 0x92, 0xa1, 0x6b, 0x92, 0x28, 0x34, 0x07, 0xa3, 0x1e, 0x1d,
	0x85, 0x22, 0x2f, 0x8b, 0x27, 0xa6, 0x99, 0xff, 0x53, 0x52, 0x71, 0x85, 0x53, 0xd8, 0xb4, 0x16,
	0x80, 0x92, 0x24, 0x78, 0x1a, 0x56, 0x28, 0x2c, 0x3f, 0xa4, 0x4f, 0x4a, 0x22, 0x9e, 0x3b, 0x52,
	0xae, 0x22, 0x3d, 0xe7, 0x9f, 0x16, 0x34, 0xf3, 0x7b, 0x50, 0x14, 0x01, 0x0c, 0x14, 0xb3, 0x9f,
	0x30, 0x95, 0x68, 0x14, 0x84, 0xb1, 0xff, 0x88, 0x5b, 0xeb, 0x1a, 0xcc, 0xb1, 0xe1, 0xd4, 0x24,
	0xa5, 0xa4, 0xfc, 0xf2, 0xf7, 0xa5, 0x55, 0x84, 0x0c, 0xb1, 0xe8, 0xf3, 0x52, 0xc6, 0xeb, 0x7c,
	0xdd, 0x1b, 0xac, 0x86, 0xf3, 0xd5, 0x0c, 0xc8, 0xad, 0xce, 0x24, 0x2b, 0xf9, 0xef, 0x36, 0x94,
	0x71, 0x93, 0xc3, 0x66, 0x39, 0x93, 0xfe, 0xb3, 0xce, 0xd1, 0x11, 0x8c, 0x77, 0x7e, 0xbc, 0x02,
	0xd3, 0xfc, 0x1a, 0x75, 0x02, 0x55, 0x65, 0xbd, 0x64, 0x4d, 0xce, 0x2d, 0x70, 0x47, 0xfb, 0xea,
	0x18, 0x0e, 0x6e, 0x2c, 0xc7, 0xf9, 0xc1, 0x5f, 0xfe, 0xf1, 0xc9, 0xd4, 0x0a, 0xb1, 0xdb, 0xc9,
	0x0b, 0x32, 0xd1, 0x66, 0x6a, 0x7f, 0x4f, 0xb8, 0xee, 0x07, 0xe4, 0x19, 0x5e, 0x5b, 0x33, 0xb7,
	0x05, 0x45, 0x7d, 0xc1, 0x4d, 0xcd, 0xbe, 0x36, 0x86, 0x43, 0x02, 0xb8, 0x8c, 0x00, 0x2e, 0x90,
	0x25, 0x09, 0x40, 0x71, 0x87, 0x8f, 0xad, 0xcc, 0x3d, 0x50, 0xb9, 0x3d, 0x6c, 0x98, 0xa5, 0x67,
	0xde, 0x4c, 0xd8, 0x37, 0xce, 0x62, 0x93, 0x48, 0xd6, 0x11, 0x49, 0x8b, 0xac, 0x18, 0x90, 0xb4,
	0x0f, 0x4f, 0x79, 0xbd, 0x45, 0x7e, 0x6e, 0x61, 0x2f, 0xcd, 0x70, 0x35, 0x26, 0xeb, 0x66, 0x55,
	0xfa, 0x65, 0x78, 0x32, 0xab, 0x6c, 0x23, 0x96, 0x4d, 0xb2, 0x61, 0xc2, 0x22, 0x36, 0x46, 0xd9,
	0x21, 0x51, 0x74, 0x14, 0x35, 0x87, 0xc8, 0xcd, 0x31, 0x46, 0xc8, 0xc0, 0xdb, 0x9a, 0x84, 0x55,
	0xe2, 0x7c, 0x11, 0x71, 0x3e, 0x4f, 0x76, 0x26, 0xc2, 0x99, 0x5a, 0xf1, 0x0f, 0x16, 0xbe, 0x46,
	0x33, 0x77, 0x56, 0xc9, 0xa6, 0x8a, 0x61, 0x4c, 0x3f, 0xd7, 0x7e, 0xee, 0x6c, 0x46, 0x09, 0xf5,
	0x01, 0x42, 0xfd, 0x3f, 0xf2, 0xf2, 0x64, 0x50, 0x9f, 0x2a, 0xd2, 0x52, 0xdc, 0x1f, 0x59, 0x3c,
	0x16, 0xf4, 0x3e, 0x55, 0x26, 0x16, 0x0c, 0x9d, 0xaf, 0xcc, 0xae, 0x9b, 0xdb, 0x5c, 0xce, 0x16,
	0x42, 0xbc, 0x4e, 0xd6, 0x53, 0x88, 0xc8, 0xd9, 0xf5, 0xfa, 0x03, 0x76, 0x10, 0xba, 0xc7, 0x6a,
	0x58, 0xfe, 0xc4, 0xc2, 0x92, 0x21, 0x77, 0x83, 0xb8, 0xaa, 0xaa, 0x32, 0x36, 0x7e, 0xec, 0xf5,
	0x71, 0x2c, 0x12, 0xce, 0x2d, 0x84, 0xb3, 0x41, 0xae, 0x49, 0x38, 0xa2, 0x12, 0x0c, 0x0d, 0x2e,
	0xf8, 0x89, 0x95, 0x6d, 0x34, 0x29, 0xb1, 0x7a, 0xbd, 0x40, 0x5f, 0x36, 0x58, 0x8b, 0xab, 0x61,
	0xe7, 0x1e, 0x82, 0xd9, 0x21, 0x5b, 0x13, 0x80, 0x49, 0xf7, 0x2b, 0x84, 0xf9, 0xcc, 0x6d, 0x93,
	0xac, 0x1a, 0xb0, 0x28, 0x10, 0xd6, 0x8a, 0x86, 0xa5, 0x59, 0xae, 0x20, 0x92, 0x4b, 0xe4, 0x62,
	0x1e, 0x09, 0xaf, 0xd8, 0x7f, 0x68, 0x61, 0x47, 0x2f, 0xdf, 0x45, 0x26, 0x9a, 0x17, 0x14, 0x74,
	0xa6, 0xed, 0xeb, 0xe3, 0x99, 0x24, 0x8e, 0x16, 0xe2, 0x68, 0x92, 0x65, 0x89, 0x43, 0xab, 0x84,
	0x88, 0x87, 0x6b, 0x57, 0x5f, 0x54, 0xea, 0x6b, 0xcf, 0xbd, 0xc2, 0x54, 0xcc, 0x9f, 0x7d, 0x25,
	0x68, 0x58, 0x34, 0x16, 0x4d, 0xaa, 0xa5, 0x6b, 0x6a, 0x8d, 0x45, 0x6c, 0x55, 0x96, 0xde, 0xad,
	0xb4, 0x57, 0x8d, 0x63, 0x52, 0xd7, 0x0d, 0xd4, 0xe5, 0x90, 0xb5, 0x8c, 0xae, 0xbc, 0xd3, 0xfd,
	0xc8, 0xc2, 0x86, 0xae, 0xf6, 0xda, 0x80, 0xb4, 0xb2, 0xd2, 0xf5, 0x57, 0x13, 0xf6, 0xd5, 0xc2,
	0x71, 0x89, 0xe0, 0x36, 0x22, 0xb8, 0x45, 0x6e, 0x9e, 0x85, 0x20, 0x5d, 0xff, 0x2f, 0xf9, 0x1b,
	0xbe, 0xdc, 0x4b, 0x2d, 0xfd, 0x54, 0x28, 0x7a, 0x85, 0x66, 0x6f, 0x9c, 0xc1, 0x25, 0x80, 0xdd,
	0x45, 0x60, 0xdb, 0xe4, 0x56, 0x16, 0x58, 0x32, 0xc3, 0x04, 0xed, 0x10, 0xaa, 0xca, 0xd5, 0x82,
	0x68, 0xbb, 0xac, 0xf5, 0xc2, 0xed, 0x15, 0xd3, 0x90, 0x54, 0x6e, 0xa3, 0xf2, 0x06, 0x21, 0x19,
	0xe5, 0x83, 0xd8, 0x27, 0xdf, 0xe7, 0x89, 0x31, 0xd3, 0x11, 0xd7, 0x13, 0xa3, 0xa9, 0xc7, 0xae,
	0x27, 0xc6, 0x82, 0x86, 0xba, 0xe1, 0x68, 0x96, 0x9a, 0x15, 0x6f, 0x78, 0x0c, 0x73, 0x89, 0xdf,
	0xf2, 0x50, 0xb7, 0xb3, 0xfe, 0xac, 0xc4, 0xf9, 0xaa, 0x71, 0x4c, 0x6a, 0x5c, 0x41, 0x8d, 0xcb,
	0xa4, 0x91, 0xd1, 0xc8, 0x23, 0xfc, 0x3d, 0xd4, 0x94, 0xb6, 0xec, 0xc9, 0x65, 0x55, 0x5a, 0xa6,
	0xc1, 0x6f, 0xb7, 0xcc, 0x83, 0x67, 0xea, 0xc2, 0x96, 0x08, 0xf9, 0x0e, 0x94, 0x79, 0x07, 0x5b,
	0x51, 0x92, 0x7f, 0xed, 0xa1, 0x6c, 0x9d, 0xa1, 0x3b, 0xee, 0x5c, 0x44, 0x15, 0x8b, 0x64, 0xbe,
	0xad, 0x7f, 0x07, 0x45, 0x7e, 0xc5, 0xdd, 0x36, 0xff, 0x61, 0x93, 0xa3, 0x82, 0x36, 0x7f, 0xee,
	0xa2, 0x3b, 0x6d, 0xe1, 0x57, 0x2c, 0xce, 0x4b, 0xa8, 0xfc, 0x36, 0x69, 0x4b, 0xe5, 0xa3, 0xf4,
	0x5b, 0xa7, 0x71, 0x31, 0xf5, 0x01, 0xe6, 0x51, 0xed, 0xc3, 0x28, 0x0e, 0x6e, 0xc5, 0xac, 0x58,
	0xd8, 0xfb, 0x4a, 0xc1, 0xa8, 0x04, 0xb4, 0x81, 0x80, 0xae, 0x90, 0x55, 0x23, 0x20, 0xa9, 0xfe,
	0x17, 0x56, 0xe6, 0x5b, 0x1f, 0xf5, 0x7b, 0x23, 0xbd, 0x48, 0x19, 0xf3, 0xa9, 0x95, 0x5e, 0xa4,
	0x8c, 0xff, 0xe2, 0xca, 0x50, 0x8e, 0xab, 0xc8, 0xb8, 0xf3, 0xfd, 0xd6, 0xca, 0x7c, 0xdd, 0x95,
	0xfb, 0x16, 0x8a, 0x6c, 0x99, 0x55, 0x9a, 0x3f, 0xb9, 0xb2, 0xdb, 0x13, 0x72, 0x8f, 0x29, 0x0c,
	0x72, 0x28, 0x53, 0x2b, 0xbe, 0x2f, 0x0f, 0x06, 0x43, 0x50, 0x66, 0xea, 0x92, 0x55, 0xe3, 0x98,
	0xd4, 0xbb, 0x86, 0x7a, 0x6d, 0xd2, 0x94, 0x7a, 0xb9, 0xae, 0x34, 0x05, 0x44, 0x58, 0x12, 0x65,
	0x9b, 0x23, 0x7a, 0x49, 0x64, 0x7c, 0x35, 0xa8, 0x97, 0x44, 0x45, 0xdd, 0x15, 0xa7, 0x81, 0x08,
	0xea, 0xa4, 0x26, 0x11, 0x44, 0x27, 0x1e, 0x79, 0x0c, 0x75, 0xfd, 0xe5, 0xb8, 0xee, 0xa0, 0xd9,
	0xb7, 0xe6, 0xba, 0x83, 0x1a, 0xde, 0xca, 0x1b, 0xc2, 0x95, 0xbf, 0x86, 0xdf, 0xfd, 0xff, 0x4f,
	0x3f, 0x6f, 0x59, 0x9f, 0x7d, 0xde, 0xb2, 0xfe, 0xfe, 0x79, 0xcb, 0xfa, 0xf8, 0x8b, 0xd6, 0xb9,
	0xcf, 0xbe, 0x68, 0x9d, 0xfb, 0xeb, 0x17, 0xad, 0x73, 0xef, 0x6e, 0x1c, 0xf7, 0xa3, 0xc7, 0xf1,
	0xe1, 0xce, 0x51, 0xe0, 0xe3, 0xa4, 0x6d, 0x3f, 0x18, 0xd0, 0x53, 0x3e, 0xff, 0x19, 0x02, 0x3d,
	0x1d, 0xd2, 0xf0, 0xb0, 0x8c, 0x1f, 0x3e, 0xde, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0x73, 0xda, 0xe0, 0xa1, 0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	FullBalance(ctx context.Context, in *QueryFullBalanceRequest, opts ...grpc.CallOption) (*QueryFullBalanceResponse, error)
	GetCollateralStats(ctx context.Context, in *GetCollateralStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error)
	GetCollateralDenomStats(ctx context.Context, in *GetCollateralDenomStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomStatsResponse, error)
	GetCollateralUserStats(ctx context.Context, in *GetCollateralUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error)
	GetCollateralDenomUserStats(ctx context.Context, in *GetCollateralDenomUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomUserStatsResponse, error)
	GetWithdrawableCollateral(ctx context.Context, in *GetWithdrawableCollateralQuery, opts ...grpc.CallOption) (*GetWithdrawableCollateralResponse, error)
	GetCreditLineUsage(ctx context.Context, in *GetCreditLineUsageQuery, opts ...grpc.CallOption) (*GetCreditLineUsageResponse, error)
	GetDepositUserStats(ctx context.Context, in *GetDepositUserStatsQuery, opts ...grpc.CallOption) (*GetDepositUserStatsResponse, error)
	GetDepositUserDenomStats(ctx context.Context, in *GetDepositUserDenomStatsQuery, opts ...grpc.CallOption) (*DepositUserStats, error)
	GetDepositStats(ctx context.Context, in *GetDepositStatsQuery, opts ...grpc.CallOption) (*GetDepositStatsResponse, error)
	GetBorrowInterestRate(ctx context.Context, in *GetBorrowInterestRateQuery, opts ...grpc.CallOption) (*GetBorrowInterestRateResponse, error)
	GetLoansByDenom(ctx context.Context, in *GetLoansByDenomQuery, opts ...grpc.CallOption) (*GetLoansResponse, error)
	GetUserLoans(ctx context.Context, in *GetUserLoansQuery, opts ...grpc.CallOption) (*GetUserLoansResponse, error)
	GetUserDenomLoan(ctx context.Context, in *GetUserDenomLoanQuery, opts ...grpc.CallOption) (*GetUserDenomLoanResponse, error)
	GetAvailableToBorrow(ctx context.Context, in *GetAvailableToBorrowRequest, opts ...grpc.CallOption) (*GetAvailableToBorrowResponse, error)
	GetNumLoans(ctx context.Context, in *GetNumLoansQuery, opts ...grpc.CallOption) (*GetNumLoansResponse, error)
	GetNumAddressLoans(ctx context.Context, in *GetNumAddressLoansQuery, opts ...grpc.CallOption) (*GetNumAddressLoansResponse, error)
	GetLoansStats(ctx context.Context, in *GetLoanStatsQuery, opts ...grpc.CallOption) (*GetLoanStatsResponse, error)
	GetValueLoans(ctx context.Context, in *GetValueLoansQuery, opts ...grpc.CallOption) (*GetValueLoansResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetRedemptionRequest(ctx context.Context, in *GetRedemptionRequestQuery, opts ...grpc.CallOption) (*GetRedemptionRequestResponse, error)
	GetRedemptionsRequest(ctx context.Context, in *GetRedemptionsQuery, opts ...grpc.CallOption) (*GetRedemptionsResponse, error)
	GetRedemptionStatsRequest(ctx context.Context, in *GetRedemptionStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionStatsRequestResponse, error)
	GetRedemptionDenomStatsRequest(ctx context.Context, in *GetRedemptionDenomStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionDenomStatsRequestResponse, error)
	GetUserStats(ctx context.Context, in *GetUserStatsQuery, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	GetTotalValueLocked(ctx context.Context, in *GetTotalValueLockedQuery, opts ...grpc.CallOption) (*GetTotalValueLockedResponse, error)
	GetVaultValues(ctx context.Context, in *GetVaultValuesQuery, opts ...grpc.CallOption) (*GetVaultValuesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FullBalance(ctx context.Context, in *QueryFullBalanceRequest, opts ...grpc.CallOption) (*QueryFullBalanceResponse, error) {
	out := new(QueryFullBalanceResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/FullBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralStats(ctx context.Context, in *GetCollateralStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error) {
	out := new(GetCollateralStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetCollateralStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralDenomStats(ctx context.Context, in *GetCollateralDenomStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomStatsResponse, error) {
	out := new(GetCollateralDenomStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetCollateralDenomStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralUserStats(ctx context.Context, in *GetCollateralUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralStatsResponse, error) {
	out := new(GetCollateralStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetCollateralUserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCollateralDenomUserStats(ctx context.Context, in *GetCollateralDenomUserStatsQuery, opts ...grpc.CallOption) (*GetCollateralDenomUserStatsResponse, error) {
	out := new(GetCollateralDenomUserStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetCollateralDenomUserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWithdrawableCollateral(ctx context.Context, in *GetWithdrawableCollateralQuery, opts ...grpc.CallOption) (*GetWithdrawableCollateralResponse, error) {
	out := new(GetWithdrawableCollateralResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetWithdrawableCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCreditLineUsage(ctx context.Context, in *GetCreditLineUsageQuery, opts ...grpc.CallOption) (*GetCreditLineUsageResponse, error) {
	out := new(GetCreditLineUsageResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetCreditLineUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositUserStats(ctx context.Context, in *GetDepositUserStatsQuery, opts ...grpc.CallOption) (*GetDepositUserStatsResponse, error) {
	out := new(GetDepositUserStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetDepositUserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositUserDenomStats(ctx context.Context, in *GetDepositUserDenomStatsQuery, opts ...grpc.CallOption) (*DepositUserStats, error) {
	out := new(DepositUserStats)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetDepositUserDenomStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDepositStats(ctx context.Context, in *GetDepositStatsQuery, opts ...grpc.CallOption) (*GetDepositStatsResponse, error) {
	out := new(GetDepositStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetDepositStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBorrowInterestRate(ctx context.Context, in *GetBorrowInterestRateQuery, opts ...grpc.CallOption) (*GetBorrowInterestRateResponse, error) {
	out := new(GetBorrowInterestRateResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetBorrowInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLoansByDenom(ctx context.Context, in *GetLoansByDenomQuery, opts ...grpc.CallOption) (*GetLoansResponse, error) {
	out := new(GetLoansResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetLoansByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserLoans(ctx context.Context, in *GetUserLoansQuery, opts ...grpc.CallOption) (*GetUserLoansResponse, error) {
	out := new(GetUserLoansResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetUserLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserDenomLoan(ctx context.Context, in *GetUserDenomLoanQuery, opts ...grpc.CallOption) (*GetUserDenomLoanResponse, error) {
	out := new(GetUserDenomLoanResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetUserDenomLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAvailableToBorrow(ctx context.Context, in *GetAvailableToBorrowRequest, opts ...grpc.CallOption) (*GetAvailableToBorrowResponse, error) {
	out := new(GetAvailableToBorrowResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetAvailableToBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNumLoans(ctx context.Context, in *GetNumLoansQuery, opts ...grpc.CallOption) (*GetNumLoansResponse, error) {
	out := new(GetNumLoansResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetNumLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNumAddressLoans(ctx context.Context, in *GetNumAddressLoansQuery, opts ...grpc.CallOption) (*GetNumAddressLoansResponse, error) {
	out := new(GetNumAddressLoansResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetNumAddressLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLoansStats(ctx context.Context, in *GetLoanStatsQuery, opts ...grpc.CallOption) (*GetLoanStatsResponse, error) {
	out := new(GetLoanStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetLoansStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValueLoans(ctx context.Context, in *GetValueLoansQuery, opts ...grpc.CallOption) (*GetValueLoansResponse, error) {
	out := new(GetValueLoansResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetValueLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionRequest(ctx context.Context, in *GetRedemptionRequestQuery, opts ...grpc.CallOption) (*GetRedemptionRequestResponse, error) {
	out := new(GetRedemptionRequestResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetRedemptionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionsRequest(ctx context.Context, in *GetRedemptionsQuery, opts ...grpc.CallOption) (*GetRedemptionsResponse, error) {
	out := new(GetRedemptionsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetRedemptionsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionStatsRequest(ctx context.Context, in *GetRedemptionStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionStatsRequestResponse, error) {
	out := new(GetRedemptionStatsRequestResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetRedemptionStatsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRedemptionDenomStatsRequest(ctx context.Context, in *GetRedemptionDenomStatsRequestQuery, opts ...grpc.CallOption) (*GetRedemptionDenomStatsRequestResponse, error) {
	out := new(GetRedemptionDenomStatsRequestResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetRedemptionDenomStatsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserStats(ctx context.Context, in *GetUserStatsQuery, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetUserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalValueLocked(ctx context.Context, in *GetTotalValueLockedQuery, opts ...grpc.CallOption) (*GetTotalValueLockedResponse, error) {
	out := new(GetTotalValueLockedResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetTotalValueLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVaultValues(ctx context.Context, in *GetVaultValuesQuery, opts ...grpc.CallOption) (*GetVaultValuesResponse, error) {
	out := new(GetVaultValuesResponse)
	err := c.cc.Invoke(ctx, "/kopi.mm.Query/GetVaultValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	FullBalance(context.Context, *QueryFullBalanceRequest) (*QueryFullBalanceResponse, error)
	GetCollateralStats(context.Context, *GetCollateralStatsQuery) (*GetCollateralStatsResponse, error)
	GetCollateralDenomStats(context.Context, *GetCollateralDenomStatsQuery) (*GetCollateralDenomStatsResponse, error)
	GetCollateralUserStats(context.Context, *GetCollateralUserStatsQuery) (*GetCollateralStatsResponse, error)
	GetCollateralDenomUserStats(context.Context, *GetCollateralDenomUserStatsQuery) (*GetCollateralDenomUserStatsResponse, error)
	GetWithdrawableCollateral(context.Context, *GetWithdrawableCollateralQuery) (*GetWithdrawableCollateralResponse, error)
	GetCreditLineUsage(context.Context, *GetCreditLineUsageQuery) (*GetCreditLineUsageResponse, error)
	GetDepositUserStats(context.Context, *GetDepositUserStatsQuery) (*GetDepositUserStatsResponse, error)
	GetDepositUserDenomStats(context.Context, *GetDepositUserDenomStatsQuery) (*DepositUserStats, error)
	GetDepositStats(context.Context, *GetDepositStatsQuery) (*GetDepositStatsResponse, error)
	GetBorrowInterestRate(context.Context, *GetBorrowInterestRateQuery) (*GetBorrowInterestRateResponse, error)
	GetLoansByDenom(context.Context, *GetLoansByDenomQuery) (*GetLoansResponse, error)
	GetUserLoans(context.Context, *GetUserLoansQuery) (*GetUserLoansResponse, error)
	GetUserDenomLoan(context.Context, *GetUserDenomLoanQuery) (*GetUserDenomLoanResponse, error)
	GetAvailableToBorrow(context.Context, *GetAvailableToBorrowRequest) (*GetAvailableToBorrowResponse, error)
	GetNumLoans(context.Context, *GetNumLoansQuery) (*GetNumLoansResponse, error)
	GetNumAddressLoans(context.Context, *GetNumAddressLoansQuery) (*GetNumAddressLoansResponse, error)
	GetLoansStats(context.Context, *GetLoanStatsQuery) (*GetLoanStatsResponse, error)
	GetValueLoans(context.Context, *GetValueLoansQuery) (*GetValueLoansResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetRedemptionRequest(context.Context, *GetRedemptionRequestQuery) (*GetRedemptionRequestResponse, error)
	GetRedemptionsRequest(context.Context, *GetRedemptionsQuery) (*GetRedemptionsResponse, error)
	GetRedemptionStatsRequest(context.Context, *GetRedemptionStatsRequestQuery) (*GetRedemptionStatsRequestResponse, error)
	GetRedemptionDenomStatsRequest(context.Context, *GetRedemptionDenomStatsRequestQuery) (*GetRedemptionDenomStatsRequestResponse, error)
	GetUserStats(context.Context, *GetUserStatsQuery) (*GetUserStatsResponse, error)
	GetTotalValueLocked(context.Context, *GetTotalValueLockedQuery) (*GetTotalValueLockedResponse, error)
	GetVaultValues(context.Context, *GetVaultValuesQuery) (*GetVaultValuesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FullBalance(ctx context.Context, req *QueryFullBalanceRequest) (*QueryFullBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullBalance not implemented")
}
func (*UnimplementedQueryServer) GetCollateralStats(ctx context.Context, req *GetCollateralStatsQuery) (*GetCollateralStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralStats not implemented")
}
func (*UnimplementedQueryServer) GetCollateralDenomStats(ctx context.Context, req *GetCollateralDenomStatsQuery) (*GetCollateralDenomStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralDenomStats not implemented")
}
func (*UnimplementedQueryServer) GetCollateralUserStats(ctx context.Context, req *GetCollateralUserStatsQuery) (*GetCollateralStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralUserStats not implemented")
}
func (*UnimplementedQueryServer) GetCollateralDenomUserStats(ctx context.Context, req *GetCollateralDenomUserStatsQuery) (*GetCollateralDenomUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollateralDenomUserStats not implemented")
}
func (*UnimplementedQueryServer) GetWithdrawableCollateral(ctx context.Context, req *GetWithdrawableCollateralQuery) (*GetWithdrawableCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawableCollateral not implemented")
}
func (*UnimplementedQueryServer) GetCreditLineUsage(ctx context.Context, req *GetCreditLineUsageQuery) (*GetCreditLineUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditLineUsage not implemented")
}
func (*UnimplementedQueryServer) GetDepositUserStats(ctx context.Context, req *GetDepositUserStatsQuery) (*GetDepositUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositUserStats not implemented")
}
func (*UnimplementedQueryServer) GetDepositUserDenomStats(ctx context.Context, req *GetDepositUserDenomStatsQuery) (*DepositUserStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositUserDenomStats not implemented")
}
func (*UnimplementedQueryServer) GetDepositStats(ctx context.Context, req *GetDepositStatsQuery) (*GetDepositStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositStats not implemented")
}
func (*UnimplementedQueryServer) GetBorrowInterestRate(ctx context.Context, req *GetBorrowInterestRateQuery) (*GetBorrowInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowInterestRate not implemented")
}
func (*UnimplementedQueryServer) GetLoansByDenom(ctx context.Context, req *GetLoansByDenomQuery) (*GetLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoansByDenom not implemented")
}
func (*UnimplementedQueryServer) GetUserLoans(ctx context.Context, req *GetUserLoansQuery) (*GetUserLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoans not implemented")
}
func (*UnimplementedQueryServer) GetUserDenomLoan(ctx context.Context, req *GetUserDenomLoanQuery) (*GetUserDenomLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDenomLoan not implemented")
}
func (*UnimplementedQueryServer) GetAvailableToBorrow(ctx context.Context, req *GetAvailableToBorrowRequest) (*GetAvailableToBorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableToBorrow not implemented")
}
func (*UnimplementedQueryServer) GetNumLoans(ctx context.Context, req *GetNumLoansQuery) (*GetNumLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumLoans not implemented")
}
func (*UnimplementedQueryServer) GetNumAddressLoans(ctx context.Context, req *GetNumAddressLoansQuery) (*GetNumAddressLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumAddressLoans not implemented")
}
func (*UnimplementedQueryServer) GetLoansStats(ctx context.Context, req *GetLoanStatsQuery) (*GetLoanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoansStats not implemented")
}
func (*UnimplementedQueryServer) GetValueLoans(ctx context.Context, req *GetValueLoansQuery) (*GetValueLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueLoans not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetRedemptionRequest(ctx context.Context, req *GetRedemptionRequestQuery) (*GetRedemptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionRequest not implemented")
}
func (*UnimplementedQueryServer) GetRedemptionsRequest(ctx context.Context, req *GetRedemptionsQuery) (*GetRedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionsRequest not implemented")
}
func (*UnimplementedQueryServer) GetRedemptionStatsRequest(ctx context.Context, req *GetRedemptionStatsRequestQuery) (*GetRedemptionStatsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionStatsRequest not implemented")
}
func (*UnimplementedQueryServer) GetRedemptionDenomStatsRequest(ctx context.Context, req *GetRedemptionDenomStatsRequestQuery) (*GetRedemptionDenomStatsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedemptionDenomStatsRequest not implemented")
}
func (*UnimplementedQueryServer) GetUserStats(ctx context.Context, req *GetUserStatsQuery) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (*UnimplementedQueryServer) GetTotalValueLocked(ctx context.Context, req *GetTotalValueLockedQuery) (*GetTotalValueLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalValueLocked not implemented")
}
func (*UnimplementedQueryServer) GetVaultValues(ctx context.Context, req *GetVaultValuesQuery) (*GetVaultValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaultValues not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FullBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/FullBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullBalance(ctx, req.(*QueryFullBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetCollateralStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralStats(ctx, req.(*GetCollateralStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralDenomStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralDenomStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralDenomStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetCollateralDenomStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralDenomStats(ctx, req.(*GetCollateralDenomStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetCollateralUserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralUserStats(ctx, req.(*GetCollateralUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCollateralDenomUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollateralDenomUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCollateralDenomUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetCollateralDenomUserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCollateralDenomUserStats(ctx, req.(*GetCollateralDenomUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWithdrawableCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawableCollateralQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWithdrawableCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetWithdrawableCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWithdrawableCollateral(ctx, req.(*GetWithdrawableCollateralQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCreditLineUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditLineUsageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCreditLineUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetCreditLineUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCreditLineUsage(ctx, req.(*GetCreditLineUsageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetDepositUserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositUserStats(ctx, req.(*GetDepositUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositUserDenomStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositUserDenomStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositUserDenomStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetDepositUserDenomStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositUserDenomStats(ctx, req.(*GetDepositUserDenomStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDepositStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDepositStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetDepositStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDepositStats(ctx, req.(*GetDepositStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBorrowInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowInterestRateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBorrowInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetBorrowInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBorrowInterestRate(ctx, req.(*GetBorrowInterestRateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLoansByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoansByDenomQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLoansByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetLoansByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLoansByDenom(ctx, req.(*GetLoansByDenomQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetUserLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserLoans(ctx, req.(*GetUserLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserDenomLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDenomLoanQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserDenomLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetUserDenomLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserDenomLoan(ctx, req.(*GetUserDenomLoanQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAvailableToBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableToBorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAvailableToBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetAvailableToBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAvailableToBorrow(ctx, req.(*GetAvailableToBorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNumLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNumLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetNumLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNumLoans(ctx, req.(*GetNumLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNumAddressLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumAddressLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNumAddressLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetNumAddressLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNumAddressLoans(ctx, req.(*GetNumAddressLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLoansStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLoansStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetLoansStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLoansStats(ctx, req.(*GetLoanStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValueLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueLoansQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValueLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetValueLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValueLoans(ctx, req.(*GetValueLoansQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetRedemptionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionRequest(ctx, req.(*GetRedemptionRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetRedemptionsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionsRequest(ctx, req.(*GetRedemptionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionStatsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionStatsRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionStatsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetRedemptionStatsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionStatsRequest(ctx, req.(*GetRedemptionStatsRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRedemptionDenomStatsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedemptionDenomStatsRequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRedemptionDenomStatsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetRedemptionDenomStatsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRedemptionDenomStatsRequest(ctx, req.(*GetRedemptionDenomStatsRequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetUserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserStats(ctx, req.(*GetUserStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalValueLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalValueLockedQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalValueLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetTotalValueLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalValueLocked(ctx, req.(*GetTotalValueLockedQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVaultValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaultValuesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVaultValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopi.mm.Query/GetVaultValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVaultValues(ctx, req.(*GetVaultValuesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopi.mm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FullBalance",
			Handler:    _Query_FullBalance_Handler,
		},
		{
			MethodName: "GetCollateralStats",
			Handler:    _Query_GetCollateralStats_Handler,
		},
		{
			MethodName: "GetCollateralDenomStats",
			Handler:    _Query_GetCollateralDenomStats_Handler,
		},
		{
			MethodName: "GetCollateralUserStats",
			Handler:    _Query_GetCollateralUserStats_Handler,
		},
		{
			MethodName: "GetCollateralDenomUserStats",
			Handler:    _Query_GetCollateralDenomUserStats_Handler,
		},
		{
			MethodName: "GetWithdrawableCollateral",
			Handler:    _Query_GetWithdrawableCollateral_Handler,
		},
		{
			MethodName: "GetCreditLineUsage",
			Handler:    _Query_GetCreditLineUsage_Handler,
		},
		{
			MethodName: "GetDepositUserStats",
			Handler:    _Query_GetDepositUserStats_Handler,
		},
		{
			MethodName: "GetDepositUserDenomStats",
			Handler:    _Query_GetDepositUserDenomStats_Handler,
		},
		{
			MethodName: "GetDepositStats",
			Handler:    _Query_GetDepositStats_Handler,
		},
		{
			MethodName: "GetBorrowInterestRate",
			Handler:    _Query_GetBorrowInterestRate_Handler,
		},
		{
			MethodName: "GetLoansByDenom",
			Handler:    _Query_GetLoansByDenom_Handler,
		},
		{
			MethodName: "GetUserLoans",
			Handler:    _Query_GetUserLoans_Handler,
		},
		{
			MethodName: "GetUserDenomLoan",
			Handler:    _Query_GetUserDenomLoan_Handler,
		},
		{
			MethodName: "GetAvailableToBorrow",
			Handler:    _Query_GetAvailableToBorrow_Handler,
		},
		{
			MethodName: "GetNumLoans",
			Handler:    _Query_GetNumLoans_Handler,
		},
		{
			MethodName: "GetNumAddressLoans",
			Handler:    _Query_GetNumAddressLoans_Handler,
		},
		{
			MethodName: "GetLoansStats",
			Handler:    _Query_GetLoansStats_Handler,
		},
		{
			MethodName: "GetValueLoans",
			Handler:    _Query_GetValueLoans_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetRedemptionRequest",
			Handler:    _Query_GetRedemptionRequest_Handler,
		},
		{
			MethodName: "GetRedemptionsRequest",
			Handler:    _Query_GetRedemptionsRequest_Handler,
		},
		{
			MethodName: "GetRedemptionStatsRequest",
			Handler:    _Query_GetRedemptionStatsRequest_Handler,
		},
		{
			MethodName: "GetRedemptionDenomStatsRequest",
			Handler:    _Query_GetRedemptionDenomStatsRequest_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _Query_GetUserStats_Handler,
		},
		{
			MethodName: "GetTotalValueLocked",
			Handler:    _Query_GetTotalValueLocked_Handler,
		},
		{
			MethodName: "GetVaultValues",
			Handler:    _Query_GetVaultValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopi/mm/query.proto",
}

func (m *GetRedemptionsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedemptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedemptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedemptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionStatsRequestQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionStatsRequestQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionStatsRequestQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRedemptionStatsRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionStatsRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionStatsRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawSumUsd) > 0 {
		i -= len(m.WithdrawSumUsd)
		copy(dAtA[i:], m.WithdrawSumUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawSumUsd)))
		i--
		dAtA[i] = 0x12
	}
	if m.NumRequests != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumRequests))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionDenomStatsRequestQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionDenomStatsRequestQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionDenomStatsRequestQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionDenomStatsRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionDenomStatsRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionDenomStatsRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumRequests != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumRequests))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WithdrawSum) > 0 {
		i -= len(m.WithdrawSum)
		copy(dAtA[i:], m.WithdrawSum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawSum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MaxFee) > 0 {
		i -= len(m.MaxFee)
		copy(dAtA[i:], m.MaxFee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MaxFee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionRequestQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionRequestQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionRequestQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRedemptionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRedemptionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRedemptionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CAssetAmount) > 0 {
		i -= len(m.CAssetAmount)
		copy(dAtA[i:], m.CAssetAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAssetAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDepositUserDenomStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepositUserDenomStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDepositUserDenomStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralDenomStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralDenomStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralDenomStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserCollateral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCollateral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCollateral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralDenomStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralDenomStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralDenomStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SumUsd) > 0 {
		i -= len(m.SumUsd)
		copy(dAtA[i:], m.SumUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserCollateral) > 0 {
		for iNdEx := len(m.UserCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLoansByDenomQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoansByDenomQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoansByDenomQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLoan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AmountBorrowedUsd) > 0 {
		i -= len(m.AmountBorrowedUsd)
		copy(dAtA[i:], m.AmountBorrowedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountBorrowedUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AmountBorrowed) > 0 {
		i -= len(m.AmountBorrowed)
		copy(dAtA[i:], m.AmountBorrowed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountBorrowed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLoanStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoanStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoanStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DenomLoanStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomLoanStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomLoanStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanSumUsd) > 0 {
		i -= len(m.LoanSumUsd)
		copy(dAtA[i:], m.LoanSumUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanSumUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LoanSum) > 0 {
		i -= len(m.LoanSum)
		copy(dAtA[i:], m.LoanSum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanSum)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AvailableToBorrowUsd) > 0 {
		i -= len(m.AvailableToBorrowUsd)
		copy(dAtA[i:], m.AvailableToBorrowUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableToBorrowUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvailableToBorrow) > 0 {
		i -= len(m.AvailableToBorrow)
		copy(dAtA[i:], m.AvailableToBorrow)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableToBorrow)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UtilityRate) > 0 {
		i -= len(m.UtilityRate)
		copy(dAtA[i:], m.UtilityRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UtilityRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLoanStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoanStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoanStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLoanSumUsd) > 0 {
		i -= len(m.TotalLoanSumUsd)
		copy(dAtA[i:], m.TotalLoanSumUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalLoanSumUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalAvailableToBorrowUsd) > 0 {
		i -= len(m.TotalAvailableToBorrowUsd)
		copy(dAtA[i:], m.TotalAvailableToBorrowUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalAvailableToBorrowUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoanStats) > 0 {
		for iNdEx := len(m.LoanStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoanStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAvailableToBorrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvailableToBorrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAvailableToBorrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAvailableToBorrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvailableToBorrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAvailableToBorrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawableCollateralQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawableCollateralQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawableCollateralQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawableCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawableCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawableCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LoanSum) > 0 {
		i -= len(m.LoanSum)
		copy(dAtA[i:], m.LoanSum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LoanSum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVaultValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVaultValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVaultValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetVaultValuesQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVaultValuesQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVaultValuesQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetUserDenomLoanQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDenomLoanQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserDenomLoanQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserDenomLoanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDenomLoanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserDenomLoanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBorrowInterestRateQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBorrowInterestRateQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBorrowInterestRateQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBorrowInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBorrowInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBorrowInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralDenomUserStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralDenomUserStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralDenomUserStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralDenomUserStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralDenomUserStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralDenomUserStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProvidedUsd) > 0 {
		i -= len(m.ProvidedUsd)
		copy(dAtA[i:], m.ProvidedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProvidedUsd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Provided) > 0 {
		i -= len(m.Provided)
		copy(dAtA[i:], m.Provided)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provided)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AvailableUsd) > 0 {
		i -= len(m.AvailableUsd)
		copy(dAtA[i:], m.AvailableUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Available) > 0 {
		i -= len(m.Available)
		copy(dAtA[i:], m.Available)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Available)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCreditLineUsageQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCreditLineUsageQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCreditLineUsageQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCreditLineUsageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCreditLineUsageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCreditLineUsageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Usage) > 0 {
		i -= len(m.Usage)
		copy(dAtA[i:], m.Usage)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Usage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalValueLockedQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalValueLockedQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalValueLockedQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNumLoansQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNumLoansQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNumLoansQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNumAddressLoansQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNumAddressLoansQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNumAddressLoansQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNumAddressLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNumAddressLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNumAddressLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetValueLoansQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValueLoansQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetValueLoansQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetValueLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetValueLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetValueLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserLoansQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserLoansQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserLoansQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDepositUserStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepositUserStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDepositUserStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralUserStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralUserStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralUserStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDepositStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepositStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDepositStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCollateralStatsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralStatsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralStatsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CollateralDenomStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralDenomStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralDenomStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositCapUsed) > 0 {
		i -= len(m.DepositCapUsed)
		copy(dAtA[i:], m.DepositCapUsed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositCapUsed)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DepositCap) > 0 {
		i -= len(m.DepositCap)
		copy(dAtA[i:], m.DepositCap)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositCap)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Deposited) > 0 {
		i -= len(m.Deposited)
		copy(dAtA[i:], m.Deposited)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Deposited)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PriceUsd) > 0 {
		i -= len(m.PriceUsd)
		copy(dAtA[i:], m.PriceUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ltv) > 0 {
		i -= len(m.Ltv)
		copy(dAtA[i:], m.Ltv)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ltv)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AmountUsd) > 0 {
		i -= len(m.AmountUsd)
		copy(dAtA[i:], m.AmountUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCollateralStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCollateralStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCollateralStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalUsd) > 0 {
		i -= len(m.TotalUsd)
		copy(dAtA[i:], m.TotalUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DepositDenomStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositDenomStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositDenomStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceCAssetUsd) > 0 {
		i -= len(m.PriceCAssetUsd)
		copy(dAtA[i:], m.PriceCAssetUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceCAssetUsd)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PriceBaseUsd) > 0 {
		i -= len(m.PriceBaseUsd)
		copy(dAtA[i:], m.PriceBaseUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceBaseUsd)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UtilityRate) > 0 {
		i -= len(m.UtilityRate)
		copy(dAtA[i:], m.UtilityRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UtilityRate)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SupplyCAssetUsd) > 0 {
		i -= len(m.SupplyCAssetUsd)
		copy(dAtA[i:], m.SupplyCAssetUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplyCAssetUsd)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SupplyCAsset) > 0 {
		i -= len(m.SupplyCAsset)
		copy(dAtA[i:], m.SupplyCAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SupplyCAsset)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RedeemingUsd) > 0 {
		i -= len(m.RedeemingUsd)
		copy(dAtA[i:], m.RedeemingUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedeemingUsd)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Redeeming) > 0 {
		i -= len(m.Redeeming)
		copy(dAtA[i:], m.Redeeming)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Redeeming)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BorrowedUsd) > 0 {
		i -= len(m.BorrowedUsd)
		copy(dAtA[i:], m.BorrowedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorrowedUsd)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Borrowed) > 0 {
		i -= len(m.Borrowed)
		copy(dAtA[i:], m.Borrowed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Borrowed)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvailableUsd) > 0 {
		i -= len(m.AvailableUsd)
		copy(dAtA[i:], m.AvailableUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailableUsd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Available) > 0 {
		i -= len(m.Available)
		copy(dAtA[i:], m.Available)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Available)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CAssetDenom) > 0 {
		i -= len(m.CAssetDenom)
		copy(dAtA[i:], m.CAssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDepositStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepositStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDepositStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalRedeemingUsd) > 0 {
		i -= len(m.TotalRedeemingUsd)
		copy(dAtA[i:], m.TotalRedeemingUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalRedeemingUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalBorrowedUsd) > 0 {
		i -= len(m.TotalBorrowedUsd)
		copy(dAtA[i:], m.TotalBorrowedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalBorrowedUsd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalAvailableUsd) > 0 {
		i -= len(m.TotalAvailableUsd)
		copy(dAtA[i:], m.TotalAvailableUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalAvailableUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalDepositedUsd) > 0 {
		i -= len(m.TotalDepositedUsd)
		copy(dAtA[i:], m.TotalDepositedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalDepositedUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DepositUserStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositUserStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositUserStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RedeemingUsd) > 0 {
		i -= len(m.RedeemingUsd)
		copy(dAtA[i:], m.RedeemingUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RedeemingUsd)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Redeeming) > 0 {
		i -= len(m.Redeeming)
		copy(dAtA[i:], m.Redeeming)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Redeeming)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PriceCAssetUsd) > 0 {
		i -= len(m.PriceCAssetUsd)
		copy(dAtA[i:], m.PriceCAssetUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceCAssetUsd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PriceBaseUsd) > 0 {
		i -= len(m.PriceBaseUsd)
		copy(dAtA[i:], m.PriceBaseUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceBaseUsd)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ValueCAssetUsd) > 0 {
		i -= len(m.ValueCAssetUsd)
		copy(dAtA[i:], m.ValueCAssetUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValueCAssetUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BaseEquivalent) > 0 {
		i -= len(m.BaseEquivalent)
		copy(dAtA[i:], m.BaseEquivalent)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseEquivalent)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AmountCAsset) > 0 {
		i -= len(m.AmountCAsset)
		copy(dAtA[i:], m.AmountCAsset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountCAsset)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CAssetValue) > 0 {
		i -= len(m.CAssetValue)
		copy(dAtA[i:], m.CAssetValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAssetValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CAssetSupply) > 0 {
		i -= len(m.CAssetSupply)
		copy(dAtA[i:], m.CAssetSupply)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAssetSupply)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CAssetDenom) > 0 {
		i -= len(m.CAssetDenom)
		copy(dAtA[i:], m.CAssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDepositUserStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDepositUserStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDepositUserStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalRedeemingUsd) > 0 {
		i -= len(m.TotalRedeemingUsd)
		copy(dAtA[i:], m.TotalRedeemingUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalRedeemingUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalDepositedUsd) > 0 {
		i -= len(m.TotalDepositedUsd)
		copy(dAtA[i:], m.TotalDepositedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalDepositedUsd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUserStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UtilityRate) > 0 {
		i -= len(m.UtilityRate)
		copy(dAtA[i:], m.UtilityRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UtilityRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalBorrowable) > 0 {
		i -= len(m.TotalBorrowable)
		copy(dAtA[i:], m.TotalBorrowable)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalBorrowable)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalWithdrawing) > 0 {
		i -= len(m.TotalWithdrawing)
		copy(dAtA[i:], m.TotalWithdrawing)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalWithdrawing)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalBorrowed) > 0 {
		i -= len(m.TotalBorrowed)
		copy(dAtA[i:], m.TotalBorrowed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalBorrowed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalCollateral) > 0 {
		i -= len(m.TotalCollateral)
		copy(dAtA[i:], m.TotalCollateral)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalCollateral)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalDeposited) > 0 {
		i -= len(m.TotalDeposited)
		copy(dAtA[i:], m.TotalDeposited)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalDeposited)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNumLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNumLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNumLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalValueLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalValueLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalValueLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLoanStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoanStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoanStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AmountAvailableUsd) > 0 {
		i -= len(m.AmountAvailableUsd)
		copy(dAtA[i:], m.AmountAvailableUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountAvailableUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AmountAvailable) > 0 {
		i -= len(m.AmountAvailable)
		copy(dAtA[i:], m.AmountAvailable)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountAvailable)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AmountBorrowedUsd) > 0 {
		i -= len(m.AmountBorrowedUsd)
		copy(dAtA[i:], m.AmountBorrowedUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountBorrowedUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AmountBorrowed) > 0 {
		i -= len(m.AmountBorrowed)
		copy(dAtA[i:], m.AmountBorrowed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountBorrowed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserLoansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserLoansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserLoansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserLoans) > 0 {
		for iNdEx := len(m.UserLoans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserLoans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullDenomBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullDenomBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDenomBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralUsd) > 0 {
		i -= len(m.CollateralUsd)
		copy(dAtA[i:], m.CollateralUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralUsd)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OrdersUsd) > 0 {
		i -= len(m.OrdersUsd)
		copy(dAtA[i:], m.OrdersUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrdersUsd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Orders) > 0 {
		i -= len(m.Orders)
		copy(dAtA[i:], m.Orders)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orders)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LiquidityUsd) > 0 {
		i -= len(m.LiquidityUsd)
		copy(dAtA[i:], m.LiquidityUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LiquidityUsd)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Liquidity) > 0 {
		i -= len(m.Liquidity)
		copy(dAtA[i:], m.Liquidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Liquidity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WalletUsd) > 0 {
		i -= len(m.WalletUsd)
		copy(dAtA[i:], m.WalletUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletUsd)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Wallet) > 0 {
		i -= len(m.Wallet)
		copy(dAtA[i:], m.Wallet)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Wallet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SumUsd) > 0 {
		i -= len(m.SumUsd)
		copy(dAtA[i:], m.SumUsd)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumUsd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFullBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFullBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFullBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SumCollateral) > 0 {
		i -= len(m.SumCollateral)
		copy(dAtA[i:], m.SumCollateral)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumCollateral)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SumOrders) > 0 {
		i -= len(m.SumOrders)
		copy(dAtA[i:], m.SumOrders)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumOrders)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SumLiquidity) > 0 {
		i -= len(m.SumLiquidity)
		copy(dAtA[i:], m.SumLiquidity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumLiquidity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SumWallet) > 0 {
		i -= len(m.SumWallet)
		copy(dAtA[i:], m.SumWallet)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SumWallet)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sum) > 0 {
		i -= len(m.Sum)
		copy(dAtA[i:], m.Sum)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRedemptionsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RedemptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetRedemptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetRedemptionStatsRequestQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRedemptionStatsRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumRequests != 0 {
		n += 1 + sovQuery(uint64(m.NumRequests))
	}
	l = len(m.WithdrawSumUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetRedemptionDenomStatsRequestQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetRedemptionDenomStatsRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaxFee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WithdrawSum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.NumRequests != 0 {
		n += 1 + sovQuery(uint64(m.NumRequests))
	}
	return n
}

func (m *GetRedemptionRequestQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetRedemptionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAssetAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDepositUserDenomStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralDenomStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserCollateral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralDenomStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserCollateral) > 0 {
		for _, e := range m.UserCollateral {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLoansByDenomQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserLoan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountBorrowed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountBorrowedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLoanStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DenomLoanStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UtilityRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableToBorrow)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableToBorrowUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LoanSum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LoanSumUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetLoanStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoanStats) > 0 {
		for _, e := range m.LoanStats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TotalAvailableToBorrowUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalLoanSumUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAvailableToBorrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAvailableToBorrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWithdrawableCollateralQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetWithdrawableCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LoanSum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetVaultValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetVaultValuesQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetUserDenomLoanQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUserDenomLoanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetBorrowInterestRateQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetBorrowInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralDenomUserStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralDenomUserStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Available)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Provided)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProvidedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCreditLineUsageQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCreditLineUsageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Usage)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalValueLockedQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNumLoansQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNumAddressLoansQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNumAddressLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *GetValueLoansQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetValueLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUserLoansQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDepositUserStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralUserStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUserStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDepositStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCollateralStatsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *CollateralDenomStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Ltv)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Deposited)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DepositCap)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DepositCapUsed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetCollateralStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TotalUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DepositDenomStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Available)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvailableUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Borrowed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BorrowedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Redeeming)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RedeemingUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SupplyCAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SupplyCAssetUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UtilityRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceBaseUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceCAssetUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDepositStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TotalDepositedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalAvailableUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalBorrowedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalRedeemingUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DepositUserStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAssetSupply)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CAssetValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountCAsset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BaseEquivalent)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValueCAssetUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceBaseUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceCAssetUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Redeeming)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RedeemingUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetDepositUserStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TotalDepositedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalRedeemingUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUserStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalDeposited)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalCollateral)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalBorrowed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalWithdrawing)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalBorrowable)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UtilityRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTotalDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetNumLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovQuery(uint64(m.Num))
	}
	return n
}

func (m *GetTotalValueLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserLoanStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountBorrowed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountBorrowedUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountAvailable)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AmountAvailableUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetUserLoansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserLoans) > 0 {
		for _, e := range m.UserLoans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFullBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FullDenomBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Wallet)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Liquidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LiquidityUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orders)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrdersUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollateralUsd)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFullBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumWallet)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumLiquidity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumOrders)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SumCollateral)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRedemptionsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedemptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedemptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedemptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &RedemptionRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionStatsRequestQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionStatsRequestQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionStatsRequestQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionStatsRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionStatsRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionStatsRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRequests", wireType)
			}
			m.NumRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawSumUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawSumUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionDenomStatsRequestQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionDenomStatsRequestQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionDenomStatsRequestQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionDenomStatsRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionDenomStatsRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionDenomStatsRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRequests", wireType)
			}
			m.NumRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionRequestQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionRequestQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionRequestQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRedemptionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRedemptionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRedemptionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssetAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepositUserDenomStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepositUserDenomStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepositUserDenomStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralDenomStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralDenomStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralDenomStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCollateral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCollateral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCollateral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralDenomStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralDenomStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralDenomStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCollateral = append(m.UserCollateral, &UserCollateral{})
			if err := m.UserCollateral[len(m.UserCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoansByDenomQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoansByDenomQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoansByDenomQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountBorrowed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBorrowedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountBorrowedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, &UserLoan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoanStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoanStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoanStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomLoanStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomLoanStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomLoanStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UtilityRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableToBorrow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrowUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableToBorrowUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSumUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanSumUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoanStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoanStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoanStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanStats = append(m.LoanStats, &DenomLoanStat{})
			if err := m.LoanStats[len(m.LoanStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAvailableToBorrowUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAvailableToBorrowUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLoanSumUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLoanSumUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvailableToBorrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAvailableToBorrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAvailableToBorrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvailableToBorrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAvailableToBorrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAvailableToBorrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawableCollateralQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawableCollateralQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawableCollateralQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawableCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawableCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawableCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVaultValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVaultValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVaultValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, &Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVaultValuesQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVaultValuesQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVaultValuesQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDenomLoanQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDenomLoanQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDenomLoanQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDenomLoanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserDenomLoanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserDenomLoanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBorrowInterestRateQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBorrowInterestRateQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBorrowInterestRateQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBorrowInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBorrowInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBorrowInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralDenomUserStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralDenomUserStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralDenomUserStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralDenomUserStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralDenomUserStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralDenomUserStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Available = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provided", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provided = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvidedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvidedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCreditLineUsageQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCreditLineUsageQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCreditLineUsageQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCreditLineUsageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCreditLineUsageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCreditLineUsageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalValueLockedQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalValueLockedQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalValueLockedQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNumLoansQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNumLoansQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNumLoansQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNumAddressLoansQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNumAddressLoansQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNumAddressLoansQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNumAddressLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNumAddressLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNumAddressLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValueLoansQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueLoansQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueLoansQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetValueLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserLoansQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserLoansQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserLoansQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepositUserStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepositUserStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepositUserStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralUserStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralUserStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralUserStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepositStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepositStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepositStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralStatsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralStatsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralStatsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollateralDenomStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralDenomStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralDenomStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ltv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposited = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCapUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCapUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCollateralStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCollateralStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCollateralStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &CollateralDenomStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositDenomStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositDenomStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositDenomStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Available = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrowed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeeming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redeeming = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemingUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemingUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyCAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyCAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyCAssetUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyCAssetUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UtilityRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceBaseUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceBaseUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceCAssetUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceCAssetUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepositStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepositStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepositStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &DepositDenomStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDepositedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAvailableUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAvailableUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBorrowedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRedeemingUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRedeemingUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositUserStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositUserStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositUserStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssetSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssetValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssetValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountCAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountCAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseEquivalent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseEquivalent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueCAssetUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueCAssetUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceBaseUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceBaseUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceCAssetUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceCAssetUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeeming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redeeming = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemingUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemingUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDepositUserStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDepositUserStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDepositUserStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &DepositUserStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDepositedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRedeemingUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRedeemingUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDeposited = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCollateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBorrowed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalWithdrawing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBorrowable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UtilityRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNumLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNumLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNumLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalValueLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalValueLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalValueLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoanStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoanStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoanStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBorrowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountBorrowed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBorrowedUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountBorrowedUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountAvailable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountAvailable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountAvailableUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountAvailableUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserLoansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserLoansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserLoansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLoans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserLoans = append(m.UserLoans, &UserLoanStat{})
			if err := m.UserLoans[len(m.UserLoans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullDenomBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullDenomBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullDenomBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdersUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralUsd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFullBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFullBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFullBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumWallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumWallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumOrders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumOrders = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumCollateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &FullDenomBalance{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
