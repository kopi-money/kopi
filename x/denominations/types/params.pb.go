// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kopi/denominations/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DexDenom struct {
	Name         string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Factor       *cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=factor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"factor,omitempty"`
	MinLiquidity cosmossdk_io_math.Int        `protobuf:"bytes,3,opt,name=min_liquidity,json=minLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"min_liquidity"`
	MinOrderSize cosmossdk_io_math.Int        `protobuf:"bytes,4,opt,name=min_order_size,json=minOrderSize,proto3,customtype=cosmossdk.io/math.Int" json:"min_order_size"`
}

func (m *DexDenom) Reset()         { *m = DexDenom{} }
func (m *DexDenom) String() string { return proto.CompactTextString(m) }
func (*DexDenom) ProtoMessage()    {}
func (*DexDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f835420dd58e1, []int{0}
}
func (m *DexDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DexDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DexDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DexDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DexDenom.Merge(m, src)
}
func (m *DexDenom) XXX_Size() int {
	return m.Size()
}
func (m *DexDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_DexDenom.DiscardUnknown(m)
}

var xxx_messageInfo_DexDenom proto.InternalMessageInfo

func (m *DexDenom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type KCoin struct {
	Denom         string                `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	References    []string              `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
	MaxSupply     cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_supply,json=maxSupply,proto3,customtype=cosmossdk.io/math.Int" json:"max_supply"`
	MaxMintAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_mint_amount,json=maxMintAmount,proto3,customtype=cosmossdk.io/math.Int" json:"max_mint_amount"`
	MaxBurnAmount cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_burn_amount,json=maxBurnAmount,proto3,customtype=cosmossdk.io/math.Int" json:"max_burn_amount"`
}

func (m *KCoin) Reset()         { *m = KCoin{} }
func (m *KCoin) String() string { return proto.CompactTextString(m) }
func (*KCoin) ProtoMessage()    {}
func (*KCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f835420dd58e1, []int{1}
}
func (m *KCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KCoin.Merge(m, src)
}
func (m *KCoin) XXX_Size() int {
	return m.Size()
}
func (m *KCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_KCoin.DiscardUnknown(m)
}

var xxx_messageInfo_KCoin proto.InternalMessageInfo

func (m *KCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *KCoin) GetReferences() []string {
	if m != nil {
		return m.References
	}
	return nil
}

type CollateralDenom struct {
	Denom      string                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Ltv        cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=ltv,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"ltv"`
	MaxDeposit cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=max_deposit,json=maxDeposit,proto3,customtype=cosmossdk.io/math.Int" json:"max_deposit"`
}

func (m *CollateralDenom) Reset()         { *m = CollateralDenom{} }
func (m *CollateralDenom) String() string { return proto.CompactTextString(m) }
func (*CollateralDenom) ProtoMessage()    {}
func (*CollateralDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f835420dd58e1, []int{2}
}
func (m *CollateralDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralDenom.Merge(m, src)
}
func (m *CollateralDenom) XXX_Size() int {
	return m.Size()
}
func (m *CollateralDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralDenom.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralDenom proto.InternalMessageInfo

func (m *CollateralDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type CAsset struct {
	Name            string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BaseDenom       string                      `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	DexFeeShare     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=dex_fee_share,json=dexFeeShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"dex_fee_share"`
	BorrowLimit     cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=borrow_limit,json=borrowLimit,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_limit"`
	MinimumLoanSize cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=minimum_loan_size,json=minimumLoanSize,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_loan_size"`
}

func (m *CAsset) Reset()         { *m = CAsset{} }
func (m *CAsset) String() string { return proto.CompactTextString(m) }
func (*CAsset) ProtoMessage()    {}
func (*CAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f835420dd58e1, []int{3}
}
func (m *CAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAsset.Merge(m, src)
}
func (m *CAsset) XXX_Size() int {
	return m.Size()
}
func (m *CAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_CAsset.DiscardUnknown(m)
}

var xxx_messageInfo_CAsset proto.InternalMessageInfo

func (m *CAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CAsset) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

// Params defines the parameters for the module.
type Params struct {
	DexDenoms        []*DexDenom        `protobuf:"bytes,1,rep,name=dex_denoms,json=dexDenoms,proto3" json:"dex_denoms,omitempty"`
	KCoins           []*KCoin           `protobuf:"bytes,2,rep,name=k_coins,json=kCoins,proto3" json:"k_coins,omitempty"`
	CAssets          []*CAsset          `protobuf:"bytes,3,rep,name=c_assets,json=cAssets,proto3" json:"c_assets,omitempty"`
	CollateralDenoms []*CollateralDenom `protobuf:"bytes,4,rep,name=collateral_denoms,json=collateralDenoms,proto3" json:"collateral_denoms,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3f835420dd58e1, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDexDenoms() []*DexDenom {
	if m != nil {
		return m.DexDenoms
	}
	return nil
}

func (m *Params) GetKCoins() []*KCoin {
	if m != nil {
		return m.KCoins
	}
	return nil
}

func (m *Params) GetCAssets() []*CAsset {
	if m != nil {
		return m.CAssets
	}
	return nil
}

func (m *Params) GetCollateralDenoms() []*CollateralDenom {
	if m != nil {
		return m.CollateralDenoms
	}
	return nil
}

func init() {
	proto.RegisterType((*DexDenom)(nil), "kopi.denominations.DexDenom")
	proto.RegisterType((*KCoin)(nil), "kopi.denominations.KCoin")
	proto.RegisterType((*CollateralDenom)(nil), "kopi.denominations.CollateralDenom")
	proto.RegisterType((*CAsset)(nil), "kopi.denominations.CAsset")
	proto.RegisterType((*Params)(nil), "kopi.denominations.Params")
}

func init() { proto.RegisterFile("kopi/denominations/params.proto", fileDescriptor_6a3f835420dd58e1) }

var fileDescriptor_6a3f835420dd58e1 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xbb, 0x6d, 0x29, 0xf4, 0x15, 0x44, 0x26, 0x98, 0x54, 0x94, 0xb6, 0x29, 0x97, 0x5e,
	0xec, 0x1a, 0x0c, 0x17, 0x31, 0x26, 0xb4, 0x15, 0x83, 0xd6, 0x48, 0x96, 0x9b, 0x97, 0xcd, 0x74,
	0x77, 0x28, 0x93, 0xee, 0xcc, 0xac, 0x3b, 0xb3, 0xba, 0xe5, 0x2f, 0xd0, 0x9b, 0x37, 0x3d, 0x19,
	0xff, 0x1c, 0x8e, 0x1c, 0x0d, 0x87, 0xc6, 0x80, 0x7f, 0x88, 0x99, 0xd9, 0xd6, 0x80, 0x34, 0x71,
	0x2f, 0xdd, 0xd7, 0xb7, 0xef, 0xf3, 0xdd, 0xf7, 0x6b, 0x06, 0xea, 0x23, 0x11, 0x52, 0xdb, 0x27,
	0x5c, 0x30, 0xca, 0xb1, 0xa2, 0x82, 0x4b, 0x3b, 0xc4, 0x11, 0x66, 0xb2, 0x1d, 0x46, 0x42, 0x09,
	0x84, 0x74, 0x40, 0xfb, 0x46, 0xc0, 0xc6, 0x1a, 0x66, 0x94, 0x0b, 0xdb, 0xfc, 0xa6, 0x61, 0x1b,
	0xeb, 0x43, 0x31, 0x14, 0xc6, 0xb4, 0xb5, 0x95, 0x7a, 0x9b, 0xbf, 0x2d, 0x58, 0xea, 0x91, 0xa4,
	0xa7, 0x69, 0x84, 0xa0, 0xc8, 0x31, 0x23, 0x55, 0xab, 0x61, 0xb5, 0xca, 0x8e, 0xb1, 0xd1, 0x2e,
	0x94, 0x8e, 0xb1, 0xa7, 0x44, 0x54, 0xcd, 0x37, 0xac, 0xd6, 0x72, 0x67, 0xeb, 0x6c, 0x52, 0xb7,
	0x2e, 0x26, 0xf5, 0x07, 0x9e, 0x90, 0x4c, 0x48, 0xe9, 0x8f, 0xda, 0x54, 0xd8, 0x0c, 0xab, 0x93,
	0x76, 0x9f, 0x0c, 0xb1, 0x37, 0xee, 0x11, 0xcf, 0x99, 0x22, 0xa8, 0x03, 0x2b, 0x8c, 0x72, 0x37,
	0xa0, 0xef, 0x63, 0xea, 0x53, 0x35, 0xae, 0x16, 0x8c, 0xc6, 0xe6, 0xd9, 0xa4, 0x9e, 0xbb, 0x98,
	0xd4, 0xef, 0xdd, 0xd6, 0x38, 0xe0, 0xca, 0x59, 0x66, 0x94, 0xf7, 0x67, 0x08, 0xea, 0xc2, 0x1d,
	0xad, 0x21, 0x22, 0x9f, 0x44, 0xae, 0xa4, 0xa7, 0xa4, 0x5a, 0xcc, 0x2a, 0xf2, 0x56, 0x33, 0x47,
	0xf4, 0x94, 0x34, 0x3f, 0xe7, 0x61, 0xe1, 0x75, 0x57, 0x50, 0x8e, 0xd6, 0x61, 0xc1, 0xb4, 0x6a,
	0x5a, 0x64, 0xfa, 0x07, 0xd5, 0x00, 0x22, 0x72, 0x4c, 0x22, 0xc2, 0x3d, 0x22, 0xab, 0xf9, 0x46,
	0xa1, 0x55, 0x76, 0xae, 0x79, 0xd0, 0x33, 0x00, 0x86, 0x13, 0x57, 0xc6, 0x61, 0x18, 0x64, 0xac,
	0xa2, 0xcc, 0x70, 0x72, 0x64, 0xe2, 0xd1, 0x0b, 0x58, 0xd5, 0x34, 0xa3, 0x5c, 0xb9, 0x98, 0x89,
	0x98, 0xab, 0x6c, 0x35, 0xac, 0x30, 0x9c, 0xbc, 0xa1, 0x5c, 0xed, 0x19, 0x66, 0x26, 0x33, 0x88,
	0x23, 0x3e, 0x93, 0x59, 0xc8, 0x2a, 0xd3, 0x89, 0x23, 0x9e, 0xca, 0x34, 0xbf, 0x5b, 0xb0, 0xda,
	0x15, 0x41, 0x80, 0x15, 0x89, 0x70, 0x90, 0x4e, 0x7e, 0x7e, 0x57, 0x76, 0xa0, 0x10, 0xa8, 0x0f,
	0xd7, 0x06, 0x9f, 0xfb, 0xdf, 0xe0, 0x75, 0x3c, 0x7a, 0x0e, 0x15, 0x9d, 0xa7, 0x4f, 0x42, 0x21,
	0xa9, 0xca, 0xd6, 0x2d, 0xdd, 0xde, 0x5e, 0x0a, 0x34, 0xbf, 0xe6, 0xa1, 0xd4, 0xdd, 0x93, 0x92,
	0xa8, 0xb9, 0x1b, 0xb9, 0x09, 0x30, 0xc0, 0x92, 0xb8, 0x69, 0xc2, 0x79, 0xf3, 0xa6, 0xac, 0x3d,
	0x69, 0x29, 0x2f, 0x61, 0xc5, 0x27, 0x89, 0x7b, 0x4c, 0x88, 0x2b, 0x4f, 0x70, 0x44, 0xa6, 0xdf,
	0xcf, 0x94, 0x7e, 0xc5, 0x27, 0xc9, 0x3e, 0x21, 0x47, 0x9a, 0x43, 0xfb, 0xb0, 0x3c, 0x10, 0x51,
	0x24, 0x3e, 0xba, 0x01, 0x65, 0x74, 0x36, 0xb2, 0x6c, 0x3a, 0x29, 0xd8, 0xd7, 0x1c, 0x3a, 0x80,
	0x35, 0x46, 0x39, 0x65, 0x31, 0x73, 0x03, 0x81, 0x79, 0xba, 0xc3, 0x99, 0x06, 0xb7, 0x3a, 0xe5,
	0xfa, 0x02, 0x73, 0xb3, 0xc6, 0x9f, 0xf2, 0x50, 0x3a, 0x34, 0x67, 0x1f, 0xed, 0x02, 0xe8, 0x32,
	0x4d, 0x13, 0x64, 0xd5, 0x6a, 0x14, 0x5a, 0x95, 0xed, 0x87, 0xed, 0xdb, 0x57, 0x41, 0x7b, 0x76,
	0xba, 0x9d, 0xb2, 0x3f, 0xb5, 0x24, 0xda, 0x86, 0xc5, 0x91, 0xeb, 0x09, 0xca, 0xd3, 0x5d, 0xaf,
	0x6c, 0xdf, 0x9f, 0x47, 0x9a, 0x03, 0xe3, 0x94, 0x46, 0xfa, 0x21, 0xd1, 0x0e, 0x2c, 0x79, 0x2e,
	0xd6, 0x53, 0x91, 0xd5, 0x82, 0x81, 0x36, 0xe6, 0x41, 0xe9, 0xe0, 0x9c, 0x45, 0xcf, 0x3c, 0x25,
	0x3a, 0x84, 0x35, 0xef, 0xef, 0xb2, 0xcd, 0xd2, 0x2d, 0x1a, 0x7e, 0x6b, 0x2e, 0x7f, 0x73, 0x33,
	0x9d, 0xbb, 0xde, 0x4d, 0x87, 0x7c, 0x5a, 0xfc, 0xf6, 0xa3, 0x9e, 0xeb, 0xbc, 0x3a, 0xbb, 0xac,
	0x59, 0xe7, 0x97, 0x35, 0xeb, 0xd7, 0x65, 0xcd, 0xfa, 0x72, 0x55, 0xcb, 0x9d, 0x5f, 0xd5, 0x72,
	0x3f, 0xaf, 0x6a, 0xb9, 0x77, 0x8f, 0x87, 0x54, 0x9d, 0xc4, 0x83, 0xb6, 0x27, 0x98, 0xad, 0x3f,
	0xf0, 0x88, 0x09, 0x4e, 0xc6, 0xc6, 0xb4, 0x93, 0x7f, 0x2e, 0x52, 0x35, 0x0e, 0x89, 0x1c, 0x94,
	0xcc, 0x5d, 0xf8, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x49, 0xfb, 0x4d, 0x6b, 0x05,
	0x00, 0x00,
}

func (m *DexDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DexDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DexDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinOrderSize.Size()
		i -= size
		if _, err := m.MinOrderSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinLiquidity.Size()
		i -= size
		if _, err := m.MinLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Factor != nil {
		{
			size := m.Factor.Size()
			i -= size
			if _, err := m.Factor.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxBurnAmount.Size()
		i -= size
		if _, err := m.MaxBurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxMintAmount.Size()
		i -= size
		if _, err := m.MaxMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.References[iNdEx])
			copy(dAtA[i:], m.References[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.References[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollateralDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxDeposit.Size()
		i -= size
		if _, err := m.MaxDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Ltv.Size()
		i -= size
		if _, err := m.Ltv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinimumLoanSize.Size()
		i -= size
		if _, err := m.MinimumLoanSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowLimit.Size()
		i -= size
		if _, err := m.BorrowLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DexFeeShare.Size()
		i -= size
		if _, err := m.DexFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralDenoms) > 0 {
		for iNdEx := len(m.CollateralDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollateralDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CAssets) > 0 {
		for iNdEx := len(m.CAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KCoins) > 0 {
		for iNdEx := len(m.KCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DexDenoms) > 0 {
		for iNdEx := len(m.DexDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DexDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DexDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Factor != nil {
		l = m.Factor.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinLiquidity.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinOrderSize.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *KCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.References) > 0 {
		for _, s := range m.References {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MaxSupply.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxMintAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxBurnAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *CollateralDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Ltv.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxDeposit.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *CAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.DexFeeShare.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowLimit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinimumLoanSize.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DexDenoms) > 0 {
		for _, e := range m.DexDenoms {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.KCoins) > 0 {
		for _, e := range m.KCoins {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.CAssets) > 0 {
		for _, e := range m.CAssets {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.CollateralDenoms) > 0 {
		for _, e := range m.CollateralDenoms {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DexDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DexDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DexDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.Factor = &v
			if err := m.Factor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOrderSize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOrderSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurnAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollateralDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ltv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ltv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDeposit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexFeeShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLoanSize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumLoanSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DexDenoms = append(m.DexDenoms, &DexDenom{})
			if err := m.DexDenoms[len(m.DexDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KCoins = append(m.KCoins, &KCoin{})
			if err := m.KCoins[len(m.KCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAssets = append(m.CAssets, &CAsset{})
			if err := m.CAssets[len(m.CAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenoms = append(m.CollateralDenoms, &CollateralDenom{})
			if err := m.CollateralDenoms[len(m.CollateralDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
